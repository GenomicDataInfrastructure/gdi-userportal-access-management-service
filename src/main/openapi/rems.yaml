# SPDX-FileCopyrightText: 2024 PNED G.I.E.
#
# SPDX-License-Identifier: Apache-2.0

openapi: 3.0.3
info:
  title: REMS API
  description: REMS API Services
  version: 1.0.0
servers:
  - url: /
paths:
  /api/translations:
    get:
      tags:
        - translations
      summary: Get translations
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
            application/transit+msgpack:
              schema:
                type: object
            application/transit+json:
              schema:
                type: object
            application/edn:
              schema:
                type: object
  /api/theme:
    get:
      tags:
        - theme
      summary: Get current layout theme
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
            application/transit+msgpack:
              schema:
                type: object
            application/transit+json:
              schema:
                type: object
            application/edn:
              schema:
                type: object
  /api/config:
    get:
      tags:
        - config
      summary: Get configuration that is relevant to UI
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConfigResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/GetConfigResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/GetConfigResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/GetConfigResponse'
  /api/config/full:
    get:
      tags:
        - config
      summary: 'Get (almost) full configuration (roles: owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
            application/transit+msgpack:
              schema:
                type: object
            application/transit+json:
              schema:
                type: object
            application/edn:
              schema:
                type: object
  /api/keepalive:
    get:
      tags:
        - keepalive
      summary: Restarts session timeout.
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        default:
          description: ''
          content: {}
  /api/my-applications:
    get:
      tags:
        - applications
      summary: 'Get the current user''s own applications (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: query
          in: query
          description: search query [documentation](https://github.com/CSCfi/rems/blob/master/docs/search.md)
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
  /api/applications:
    get:
      tags:
        - applications
      summary: 'Get all applications which the current user can see (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: query
          in: query
          description: search query [documentation](https://github.com/CSCfi/rems/blob/master/docs/search.md)
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
  /api/applications/todo:
    get:
      tags:
        - applications
      summary: 'Get all applications that the current user needs to act on. (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: query
          in: query
          description: search query [documentation](https://github.com/CSCfi/rems/blob/master/docs/search.md)
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
  /api/applications/handled/count:
    get:
      tags:
        - applications
      summary: 'Get count of all applications that the current user no more needs to act on. (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: integer
                format: int64
            application/transit+msgpack:
              schema:
                type: integer
                format: int64
            application/transit+json:
              schema:
                type: integer
                format: int64
            application/edn:
              schema:
                type: integer
                format: int64
  /api/applications/handled:
    get:
      tags:
        - applications
      summary: 'Get all applications that the current user no more needs to act on. (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: query
          in: query
          description: search query [documentation](https://github.com/CSCfi/rems/blob/master/docs/search.md)
          schema:
            type: string
        - name: limit
          in: query
          description: how many results to return
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationOverview'
  /api/applications/create:
    post:
      tags:
        - applications
      summary: 'Create a new application (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/CreateApplicationCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/CreateApplicationCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/CreateApplicationCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApplicationResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/CreateApplicationResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/CreateApplicationResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/CreateApplicationResponse'
      x-codegen-request-body-name: CreateApplicationCommand
  /api/applications/copy-as-new:
    post:
      tags:
        - applications
      summary: 'Create a new application as a copy of an existing application. (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyAsNewCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/CopyAsNewCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/CopyAsNewCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/CopyAsNewCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CopyAsNewResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/CopyAsNewResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/CopyAsNewResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/CopyAsNewResponse'
      x-codegen-request-body-name: CopyAsNewCommand
  /api/applications/reviewers:
    get:
      tags:
        - applications
      summary: 'Available reviewers (roles: handler)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reviewer'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reviewer'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reviewer'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reviewer'
  /api/applications/export:
    get:
      tags:
        - applications
      summary: 'Export all submitted applications of a given form as CSV (roles: owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: form-id
          in: query
          description: form id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: ''
          content: {}
  /api/applications/members:
    get:
      tags:
        - applications
      summary: 'Existing REMS users available for application membership (roles: handler)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Applicant'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Applicant'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Applicant'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Applicant'
  /api/applications/deciders:
    get:
      tags:
        - applications
      summary: 'Available deciders (roles: handler)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Decider'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Decider'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Decider'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Decider'
  /api/applications/attachment/{attachment-id}:
    get:
      tags:
        - applications
      summary: 'Get an attachment (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: attachment-id
          in: path
          description: attachment id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: ''
          content: {}
  /api/applications/add-attachment:
    post:
      tags:
        - applications
      summary: 'Add an attachment file related to an application (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - $ref: '#/definitions/FileUpload'
        - name: application-id
          in: query
          description: application id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveAttachmentResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SaveAttachmentResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SaveAttachmentResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SaveAttachmentResponse'
  /api/applications/accept-invitation:
    post:
      tags:
        - applications
      summary: 'Accept an invitation by token (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: invitation-token
          in: query
          description: invitation token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptInvitationResult'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/AcceptInvitationResult'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/AcceptInvitationResult'
            application/edn:
              schema:
                $ref: '#/components/schemas/AcceptInvitationResult'
  /api/applications/validate:
    post:
      tags:
        - applications
      summary: 'Validate the form, like in save, but nothing is saved. NB: At the moment, both errors and validations are identical, but this may not always be so. (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateRequest'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/ValidateRequest'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/ValidateRequest'
          application/edn:
            schema:
              $ref: '#/components/schemas/ValidateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: ValidateRequest
  /api/applications/commands:
    get:
      tags:
        - applications
      summary: 'List of application commands (roles: handler, organization-owner, owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            application/transit+msgpack:
              schema:
                type: array
                items:
                  type: string
            application/transit+json:
              schema:
                type: array
                items:
                  type: string
            application/edn:
              schema:
                type: array
                items:
                  type: string
  /api/applications/accept-licenses:
    post:
      tags:
        - applications
      summary: 'Submit a `accept-licenses` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptLicensesCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/AcceptLicensesCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/AcceptLicensesCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/AcceptLicensesCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: AcceptLicensesCommand
  /api/applications/add-licenses:
    post:
      tags:
        - applications
      summary: 'Submit a `add-licenses` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddLicensesCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/AddLicensesCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/AddLicensesCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/AddLicensesCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: AddLicensesCommand
  /api/applications/add-member:
    post:
      tags:
        - applications
      summary: 'Submit a `add-member` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMemberCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/AddMemberCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/AddMemberCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/AddMemberCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: AddMemberCommand
  /api/applications/approve:
    post:
      tags:
        - applications
      summary: 'Submit a `approve` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/ApproveCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/ApproveCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/ApproveCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: ApproveCommand
  /api/applications/assign-external-id:
    post:
      tags:
        - applications
      summary: 'Submit a `assign-external-id` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignExternalIdCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/AssignExternalIdCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/AssignExternalIdCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/AssignExternalIdCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: AssignExternalIdCommand
  /api/applications/change-resources:
    post:
      tags:
        - applications
      summary: 'Submit a `change-resources` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeResourcesCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/ChangeResourcesCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/ChangeResourcesCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/ChangeResourcesCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: ChangeResourcesCommand
  /api/applications/close:
    post:
      tags:
        - applications
      summary: 'Submit a `close` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloseCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/CloseCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/CloseCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/CloseCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: CloseCommand
  /api/applications/decide:
    post:
      tags:
        - applications
      summary: 'Submit a `decide` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecideCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/DecideCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/DecideCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/DecideCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: DecideCommand
  /api/applications/delete:
    post:
      tags:
        - applications
      summary: 'Submit a `delete` command for an application. Only drafts can be deleted. Only applicants can delete drafts. (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/DeleteCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/DeleteCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/DeleteCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: DeleteCommand
  /api/applications/invite-decider:
    post:
      tags:
        - applications
      summary: 'Submit a `invite-decider` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteDeciderCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/InviteDeciderCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/InviteDeciderCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/InviteDeciderCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: InviteDeciderCommand
  /api/applications/invite-member:
    post:
      tags:
        - applications
      summary: 'Submit a `invite-member` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteMemberCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/InviteMemberCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/InviteMemberCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/InviteMemberCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: InviteMemberCommand
  /api/applications/invite-reviewer:
    post:
      tags:
        - applications
      summary: 'Submit a `invite-reviewer` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteReviewerCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/InviteReviewerCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/InviteReviewerCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/InviteReviewerCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: InviteReviewerCommand
  /api/applications/change-applicant:
    post:
      tags:
        - applications
      summary: 'Submit a `change-applicant` command for an application. Promote member of application to applicant. Previous applicant becomes a member. (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeApplicantCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/ChangeApplicantCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/ChangeApplicantCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/ChangeApplicantCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: ChangeApplicantCommand
  /api/applications/redact-attachments:
    post:
      tags:
        - applications
      summary: 'Submit a `redact-attachments` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedactAttachmentsCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/RedactAttachmentsCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/RedactAttachmentsCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/RedactAttachmentsCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: RedactAttachmentsCommand
  /api/applications/reject:
    post:
      tags:
        - applications
      summary: 'Submit a `reject` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/RejectCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/RejectCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/RejectCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: RejectCommand
  /api/applications/remark:
    post:
      tags:
        - applications
      summary: 'Submit a `remark` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemarkCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/RemarkCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/RemarkCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/RemarkCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: RemarkCommand
  /api/applications/remove-member:
    post:
      tags:
        - applications
      summary: 'Submit a `remove-member` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveMemberCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/RemoveMemberCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/RemoveMemberCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/RemoveMemberCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: RemoveMemberCommand
  /api/applications/request-decision:
    post:
      tags:
        - applications
      summary: 'Submit a `request-decision` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestDecisionCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/RequestDecisionCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/RequestDecisionCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/RequestDecisionCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: RequestDecisionCommand
  /api/applications/request-review:
    post:
      tags:
        - applications
      summary: 'Submit a `request-review` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestReviewCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/RequestReviewCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/RequestReviewCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/RequestReviewCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: RequestReviewCommand
  /api/applications/return:
    post:
      tags:
        - applications
      summary: 'Submit a `return` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReturnCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/ReturnCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/ReturnCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/ReturnCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: ReturnCommand
  /api/applications/review:
    post:
      tags:
        - applications
      summary: 'Submit a `review` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/ReviewCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/ReviewCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/ReviewCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: ReviewCommand
  /api/applications/revoke:
    post:
      tags:
        - applications
      summary: 'Submit a `revoke` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/RevokeCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/RevokeCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/RevokeCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: RevokeCommand
  /api/applications/save-draft:
    post:
      tags:
        - applications
      summary: 'Submit a `save-draft` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveDraftCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/SaveDraftCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/SaveDraftCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/SaveDraftCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: SaveDraftCommand
  /api/applications/submit:
    post:
      tags:
        - applications
      summary: 'Submit a `submit` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/SubmitCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/SubmitCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/SubmitCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: SubmitCommand
  /api/applications/uninvite-member:
    post:
      tags:
        - applications
      summary: 'Submit a `uninvite-member` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UninviteMemberCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/UninviteMemberCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/UninviteMemberCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/UninviteMemberCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: UninviteMemberCommand
  /api/applications/vote:
    post:
      tags:
        - applications
      summary: 'Submit a `vote` command for an application.  (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/VoteCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/VoteCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/VoteCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: VoteCommand
  /api/applications/{application-id}:
    get:
      tags:
        - applications
      summary: 'Get application by `application-id`. Application is customized for the requesting user (e.g. event visibility, permissions, etc). (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: application-id
          in: path
          description: application id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/Application'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/Application'
            application/edn:
              schema:
                $ref: '#/components/schemas/Application'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: string
            application/transit+msgpack:
              schema:
                type: string
            application/transit+json:
              schema:
                type: string
            application/edn:
              schema:
                type: string
  /api/applications/{application-id}/raw:
    get:
      tags:
        - applications
      summary: 'Get application by `application-id`. Unlike the /api/applications/:application-id endpoint, the data here isn''t customized for the requesting user (see schema for details). Suitable for integrations and exporting applications. (roles: owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: application-id
          in: path
          description: application id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationRaw'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/ApplicationRaw'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/ApplicationRaw'
            application/edn:
              schema:
                $ref: '#/components/schemas/ApplicationRaw'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: string
            application/transit+msgpack:
              schema:
                type: string
            application/transit+json:
              schema:
                type: string
            application/edn:
              schema:
                type: string
  /api/applications/{application-id}/attachments:
    get:
      tags:
        - applications
      summary: 'Get attachments for an application as a zip file (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: application-id
          in: path
          description: application id
          required: true
          schema:
            type: integer
            format: int64
        - name: all
          in: query
          description: 'Defaults to true. If set to false, the zip will only contain latest application attachments: no previous versions of attachments, and no event attachments.'
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content: {}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: string
            application/transit+msgpack:
              schema:
                type: string
            application/transit+json:
              schema:
                type: string
            application/edn:
              schema:
                type: string
  /api/applications/{application-id}/pdf:
    get:
      tags:
        - applications
      summary: 'Get a pdf version of an application (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: application-id
          in: path
          description: application id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: ''
          content: {}
  /api/applications/{application-id}/license-attachment/{license-id}/{language}:
    get:
      tags:
        - applications
      summary: 'Get file associated with licence of type attachment associated with application. (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: application-id
          in: path
          description: application id
          required: true
          schema:
            type: integer
            format: int64
        - name: license-id
          in: path
          description: license id
          required: true
          schema:
            type: integer
            format: int64
        - name: language
          in: path
          description: language code
          required: true
          schema:
            type: string
      responses:
        default:
          description: ''
          content: {}
  /api/audit-log:
    get:
      tags:
        - audit log
      summary: 'Get audit log entries (roles: reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: userid
          in: query
          description: Only show entries for this user
          schema:
            type: string
        - name: application-id
          in: query
          description: Only show requests for `/api/application/<application>*` endpoints
          schema:
            type: string
        - name: after
          in: query
          description: Only show entries after this time
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          description: Only show entries before this time
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLogEntry'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLogEntry'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLogEntry'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLogEntry'
  /api/blacklist:
    get:
      tags:
        - blacklist
      summary: 'Get blacklist entries (roles: handler, organization-owner, owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: user
          in: query
          schema:
            type: string
        - name: resource
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlacklistEntryWithDetails'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlacklistEntryWithDetails'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlacklistEntryWithDetails'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlacklistEntryWithDetails'
  /api/blacklist/users:
    get:
      tags:
        - blacklist
      summary: 'Existing REMS users available for adding to the blacklist (roles: handler, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithAttributes'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithAttributes'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithAttributes'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithAttributes'
  /api/blacklist/add:
    post:
      tags:
        - blacklist
      summary: 'Add a blacklist entry (roles: handler, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlacklistCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/BlacklistCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/BlacklistCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/BlacklistCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: BlacklistCommand
  /api/blacklist/remove:
    post:
      tags:
        - blacklist
      summary: 'Remove a blacklist entry (roles: handler, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlacklistCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/BlacklistCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/BlacklistCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/BlacklistCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: BlacklistCommand
  /api/catalogue:
    get:
      tags:
        - catalogue
      summary: Get the catalogue of items for the UI (does not include archived items)
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogueItem'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogueItem'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogueItem'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogueItem'
  /api/catalogue/tree:
    get:
      tags:
        - catalogue
      summary: Get the catalogue of items in a tree for the UI (does not include archived items) (EXPERIMENTAL)
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCatalogueTreeResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/GetCatalogueTreeResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/GetCatalogueTreeResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/GetCatalogueTreeResponse'
  /api/catalogue-items:
    get:
      tags:
        - catalogue items
      summary: 'Get catalogue items (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: resource
          in: query
          description: resource id (optional)
          schema:
            type: string
        - name: expand
          in: query
          description: expanded additional attributes (optional), can be "names"
          schema:
            type: string
        - name: archived
          in: query
          description: whether to include archived items
          schema:
            type: boolean
        - name: disabled
          in: query
          description: whether to include disabled items
          schema:
            type: boolean
        - name: expired
          in: query
          description: whether to include expired items
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogueItem'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogueItem'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogueItem'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogueItem'
  /api/catalogue-items/{item-id}/change-form:
    post:
      tags:
        - catalogue items
      summary: 'Change catalogue item form. Creates a copy and ends the old. (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: item-id
          in: path
          description: catalogue item
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeFormCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/ChangeFormCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/ChangeFormCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/ChangeFormCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeFormResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/ChangeFormResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/ChangeFormResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/ChangeFormResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
            application/transit+msgpack:
              schema:
                type: object
            application/transit+json:
              schema:
                type: object
            application/edn:
              schema:
                type: object
      x-codegen-request-body-name: ChangeFormCommand
  /api/catalogue-items/{item-id}:
    get:
      tags:
        - catalogue items
      summary: Get a single catalogue item
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: item-id
          in: path
          description: catalogue item
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogueItem'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/CatalogueItem'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/CatalogueItem'
            application/edn:
              schema:
                $ref: '#/components/schemas/CatalogueItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
            application/transit+msgpack:
              schema:
                type: object
            application/transit+json:
              schema:
                type: object
            application/edn:
              schema:
                type: object
  /api/catalogue-items/create:
    post:
      tags:
        - catalogue items
      summary: 'Create a new catalogue item (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCatalogueItemCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/CreateCatalogueItemCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/CreateCatalogueItemCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/CreateCatalogueItemCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCatalogueItemResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/CreateCatalogueItemResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/CreateCatalogueItemResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/CreateCatalogueItemResponse'
      x-codegen-request-body-name: CreateCatalogueItemCommand
  /api/catalogue-items/edit:
    put:
      tags:
        - catalogue items
      summary: 'Edit a catalogue item (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCatalogueItemCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/EditCatalogueItemCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/EditCatalogueItemCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/EditCatalogueItemCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: EditCatalogueItemCommand
  /api/catalogue-items/archived:
    put:
      tags:
        - catalogue items
      summary: 'Archive or unarchive catalogue item (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: ArchivedCommand
  /api/catalogue-items/enabled:
    put:
      tags:
        - catalogue items
      summary: 'Enable or disable catalogue item (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: EnabledCommand
  /api/categories:
    get:
      tags:
        - categories
      summary: 'Get all categories (roles: handler, organization-owner, owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    put:
      tags:
        - categories
      summary: 'Update category, DEPRECATED, will disappear, use /edit instead (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/UpdateCategoryCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/UpdateCategoryCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: UpdateCategoryCommand
    post:
      tags:
        - categories
      summary: 'Create category. DEPRECATED, will disappear, use /create instead (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/CreateCategoryCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/CreateCategoryCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/CreateCategoryCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                x-oneOf:
                  - $ref: '#/definitions/SuccessResponse'
                  - $ref: '#/definitions/SuccessResponse'
            application/transit+msgpack:
              schema:
                type: object
                x-oneOf:
                  - $ref: '#/definitions/SuccessResponse'
                  - $ref: '#/definitions/SuccessResponse'
            application/transit+json:
              schema:
                type: object
                x-oneOf:
                  - $ref: '#/definitions/SuccessResponse'
                  - $ref: '#/definitions/SuccessResponse'
            application/edn:
              schema:
                type: object
                x-oneOf:
                  - $ref: '#/definitions/SuccessResponse'
                  - $ref: '#/definitions/SuccessResponse'
      x-codegen-request-body-name: CreateCategoryCommand
  /api/categories/{category-id}:
    get:
      tags:
        - categories
      summary: 'Get category by id (roles: handler, organization-owner, owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: category-id
          in: path
          description: category id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryFull'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/CategoryFull'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/CategoryFull'
            application/edn:
              schema:
                $ref: '#/components/schemas/CategoryFull'
  /api/categories/create:
    post:
      tags:
        - categories
      summary: 'Create category (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/CreateCategoryCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/CreateCategoryCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/CreateCategoryCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                x-oneOf:
                  - $ref: '#/definitions/SuccessResponse'
                  - $ref: '#/definitions/SuccessResponse'
            application/transit+msgpack:
              schema:
                type: object
                x-oneOf:
                  - $ref: '#/definitions/SuccessResponse'
                  - $ref: '#/definitions/SuccessResponse'
            application/transit+json:
              schema:
                type: object
                x-oneOf:
                  - $ref: '#/definitions/SuccessResponse'
                  - $ref: '#/definitions/SuccessResponse'
            application/edn:
              schema:
                type: object
                x-oneOf:
                  - $ref: '#/definitions/SuccessResponse'
                  - $ref: '#/definitions/SuccessResponse'
      x-codegen-request-body-name: CreateCategoryCommand
  /api/categories/edit:
    put:
      tags:
        - categories
      summary: 'Update category (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/UpdateCategoryCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/UpdateCategoryCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: UpdateCategoryCommand
  /api/categories/delete:
    post:
      tags:
        - categories
      summary: 'Delete category (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCategoryCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/DeleteCategoryCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/DeleteCategoryCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/DeleteCategoryCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: DeleteCategoryCommand
  /api/email/send-reminders:
    post:
      tags:
        - email
      summary: 'Send all reminders. (roles: api-key)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        default:
          description: ''
          content: {}
  /api/email/send-handler-reminder:
    post:
      tags:
        - email
      summary: 'Send reminders about open applications to all handlers. (roles: api-key)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        default:
          description: ''
          content: {}
  /api/email/send-reviewer-reminder:
    post:
      tags:
        - email
      summary: 'Send reminders about applications pending review. (roles: api-key)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        default:
          description: ''
          content: {}
  /api/entitlements:
    get:
      tags:
        - entitlements
      summary: 'With proper privileges gets all entitlements, otherwise returns user''s own entitlements. (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: user
          in: query
          description: return entitlements for this user (optional), ignored if the user doesn't have appropriate privileges
          schema:
            type: string
        - name: resource
          in: query
          description: return entitlements for this resource (optional)
          schema:
            type: string
        - name: expired
          in: query
          description: whether to include expired entitlements
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entitlement'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entitlement'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entitlement'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entitlement'
  /api/entitlements/export-csv:
    get:
      tags:
        - entitlements
      summary: 'Return entitlements as CSV string. With proper privileges gets all entitlements, otherwise returns user''s own entitlements. (roles: handler, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: user
          in: query
          description: return entitlements for this user (optional), ignored if the user doesn't have appropriate privileges
          schema:
            type: string
        - name: resource
          in: query
          description: return entitlements for this resource (optional)
          schema:
            type: string
        - name: expired
          in: query
          description: whether to include expired entitlements
          schema:
            type: boolean
        - name: separator
          in: query
          description: which separator to use in returned csv (optional)
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            text/csv:
              schema:
                type: string
  /api/extra-pages/{page-id}:
    get:
      tags:
        - extra-pages
      summary: Return all translations for a given extra page
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: page-id
          in: path
          description: page-id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtraPageResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/ExtraPageResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/ExtraPageResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/ExtraPageResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
            application/transit+msgpack:
              schema:
                type: object
            application/transit+json:
              schema:
                type: object
            application/edn:
              schema:
                type: object
  /api/forms:
    get:
      tags:
        - forms
      summary: 'Get forms (roles: handler, organization-owner, owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: disabled
          in: query
          description: whether to include disabled forms
          schema:
            type: boolean
        - name: archived
          in: query
          description: whether to include archived forms
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormTemplateOverview'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormTemplateOverview'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormTemplateOverview'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormTemplateOverview'
  /api/forms/create:
    post:
      tags:
        - forms
      summary: 'Create form (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFormCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/CreateFormCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/CreateFormCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/CreateFormCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFormResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/CreateFormResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/CreateFormResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/CreateFormResponse'
      x-codegen-request-body-name: CreateFormCommand
  /api/forms/{form-id}:
    get:
      tags:
        - forms
      summary: 'Get form by id (roles: handler, organization-owner, owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: form-id
          in: path
          description: form-id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormTemplate'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/FormTemplate'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/FormTemplate'
            application/edn:
              schema:
                $ref: '#/components/schemas/FormTemplate'
  /api/forms/{form-id}/editable:
    get:
      tags:
        - forms
      summary: 'Check if the form is editable (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: form-id
          in: path
          description: form-id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /api/forms/edit:
    put:
      tags:
        - forms
      summary: 'Edit form (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditFormCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/EditFormCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/EditFormCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/EditFormCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: EditFormCommand
  /api/forms/archived:
    put:
      tags:
        - forms
      summary: 'Archive or unarchive form (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: ArchivedCommand
  /api/forms/enabled:
    put:
      tags:
        - forms
      summary: 'Enable or disable form (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: EnabledCommand
  /api/health:
    get:
      tags:
        - health
      summary: Health check
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/Health'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/Health'
            application/edn:
              schema:
                $ref: '#/components/schemas/Health'
  /api/invitations:
    get:
      tags:
        - invitations
      summary: 'Get invitations (roles: handler, organization-owner, owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: sent
          in: query
          description: whether to include sent invitations
          schema:
            type: boolean
        - name: accepted
          in: query
          description: whether to include accepted invitations
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvitationResponse'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvitationResponse'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvitationResponse'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvitationResponse'
  /api/invitations/create:
    post:
      tags:
        - invitations
      summary: 'Create an invitation. The invitation will be sent asynchronously to the recipient. (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvitationCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/CreateInvitationCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/CreateInvitationCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/CreateInvitationCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateInvitationResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/CreateInvitationResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/CreateInvitationResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/CreateInvitationResponse'
      x-codegen-request-body-name: CreateInvitationCommand
  /api/invitations/accept-invitation:
    post:
      tags:
        - invitations
      summary: 'Accept an invitation. The invitation token will be spent. (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: token
          in: query
          description: secret token of the invitation
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptInvitationResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/AcceptInvitationResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/AcceptInvitationResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/AcceptInvitationResponse'
  /api/licenses:
    get:
      tags:
        - licenses
      summary: 'Get licenses (roles: handler, organization-owner, owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: disabled
          in: query
          description: whether to include disabled licenses
          schema:
            type: boolean
        - name: archived
          in: query
          description: whether to include archived licenses
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/License'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/License'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/License'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/License'
  /api/licenses/{license-id}:
    get:
      tags:
        - licenses
      summary: 'Get license (roles: handler, organization-owner, owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: license-id
          in: path
          description: license id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/License'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/License'
            application/edn:
              schema:
                $ref: '#/components/schemas/License'
  /api/licenses/create:
    post:
      tags:
        - licenses
      summary: 'Create license (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLicenseCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/CreateLicenseCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/CreateLicenseCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/CreateLicenseCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLicenseResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/CreateLicenseResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/CreateLicenseResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/CreateLicenseResponse'
      x-codegen-request-body-name: CreateLicenseCommand
  /api/licenses/archived:
    put:
      tags:
        - licenses
      summary: 'Archive or unarchive license (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: ArchivedCommand
  /api/licenses/enabled:
    put:
      tags:
        - licenses
      summary: 'Enable or disable license (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: EnabledCommand
  /api/licenses/add_attachment:
    post:
      tags:
        - licenses
      summary: 'Add an attachment file that will be used in a license (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - $ref: '#/definitions/FileUpload'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentMetadata'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/AttachmentMetadata'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/AttachmentMetadata'
            application/edn:
              schema:
                $ref: '#/components/schemas/AttachmentMetadata'
  /api/licenses/remove_attachment:
    post:
      tags:
        - licenses
      summary: 'Remove an attachment that could have been used in a license. (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: attachment-id
          in: query
          description: attachment id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /api/licenses/attachments/{attachment-id}:
    get:
      tags:
        - licenses
      summary: 'Get a license''s attachment (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: attachment-id
          in: path
          description: attachment id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: ''
          content: {}
  /api/organizations:
    get:
      tags:
        - organizations
      summary: 'Get organizations. Returns more information for owners and handlers. (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: owner
          in: query
          description: return only organizations that are owned by owner
          schema:
            type: string
        - name: disabled
          in: query
          description: whether to include disabled organizations
          schema:
            type: boolean
        - name: archived
          in: query
          description: whether to include archived organizations
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationFull'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationFull'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationFull'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationFull'
  /api/organizations/create:
    post:
      tags:
        - organizations
      summary: 'Create organization (roles: owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/CreateOrganizationCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/CreateOrganizationCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrganizationResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/CreateOrganizationResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/CreateOrganizationResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/CreateOrganizationResponse'
      x-codegen-request-body-name: CreateOrganizationCommand
  /api/organizations/edit:
    put:
      tags:
        - organizations
      summary: 'Edit organization. Organization owners cannot change the owners. (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditOrganizationCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/EditOrganizationCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/EditOrganizationCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/EditOrganizationCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditOrganizationResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/EditOrganizationResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/EditOrganizationResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/EditOrganizationResponse'
      x-codegen-request-body-name: EditOrganizationCommand
  /api/organizations/archived:
    put:
      tags:
        - organizations
      summary: 'Archive or unarchive the organization (roles: owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationArchivedCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/OrganizationArchivedCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/OrganizationArchivedCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/OrganizationArchivedCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: OrganizationArchivedCommand
  /api/organizations/enabled:
    put:
      tags:
        - organizations
      summary: 'Enable or disable the organization (roles: owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationEnabledCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/OrganizationEnabledCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/OrganizationEnabledCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/OrganizationEnabledCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: OrganizationEnabledCommand
  /api/organizations/available-owners:
    get:
      tags:
        - organizations
      summary: 'List of available owners (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableOwner'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableOwner'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableOwner'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableOwner'
  /api/organizations/{organization-id}:
    get:
      tags:
        - organizations
      summary: 'Get an organization. Returns more information for owners and handlers. (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: organization-id
          in: path
          description: organization id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationFull'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/OrganizationFull'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/OrganizationFull'
            application/edn:
              schema:
                $ref: '#/components/schemas/OrganizationFull'
  /api/jwk:
    get:
      tags:
        - permissions
      summary: Experimental. Get JSON Web Key Set (JWKS) (RFC 7517) containing the keys used for signing GA4GH Visas.
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJWKSResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/GetJWKSResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/GetJWKSResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/GetJWKSResponse'
        '501':
          description: 'Permissions API is not enabled. #{:enable-permissions-api}'
          content: {}
  /api/permissions/{user}:
    get:
      tags:
        - permissions
      summary: 'Experimental. Returns user''s permissions in ga4gh visa format. Handlers, owners and reporters can query anybody''s permissions. Other users can query their own permissions. See also https://github.com/CSCfi/rems/blob/master/docs/ga4gh-visas.md (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: user
          in: path
          description: return permissions for this user, required
          required: true
          schema:
            type: string
        - name: expired
          in: query
          description: whether to include expired permissions
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPermissionsResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/GetPermissionsResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/GetPermissionsResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/GetPermissionsResponse'
        '501':
          description: 'Permissions API is not enabled. #{:enable-permissions-api}'
          content: {}
  /api/resources:
    get:
      tags:
        - resources
      summary: 'Get resources (roles: handler, organization-owner, owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: disabled
          in: query
          description: whether to include disabled resources
          schema:
            type: boolean
        - name: archived
          in: query
          description: whether to include archived resources
          schema:
            type: boolean
        - name: resid
          in: query
          description: optionally filter by resid (external resource identifier)
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
  /api/resources/duo-codes:
    get:
      tags:
        - resources
      summary: 'Get DUO codes (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DuoCodeFull'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DuoCodeFull'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DuoCodeFull'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DuoCodeFull'
  /api/resources/mondo-codes:
    get:
      tags:
        - resources
      summary: 'Get Mondo codes (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MondoCodeFull'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MondoCodeFull'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MondoCodeFull'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MondoCodeFull'
  /api/resources/search-mondo-codes:
    get:
      tags:
        - resources
      summary: 'Search Mondo codes, maximum 100 results (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: search-text
          in: query
          description: text to be contained in id or label of the code
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MondoCodeFull'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MondoCodeFull'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MondoCodeFull'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MondoCodeFull'
  /api/resources/{resource-id}:
    get:
      tags:
        - resources
      summary: 'Get resource by id (roles: handler, organization-owner, owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: resource-id
          in: path
          description: resource id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/Resource'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/Resource'
            application/edn:
              schema:
                $ref: '#/components/schemas/Resource'
  /api/resources/create:
    post:
      tags:
        - resources
      summary: 'Create resource (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/CreateResourceCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/CreateResourceCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/CreateResourceCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/CreateResourceResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/CreateResourceResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/CreateResourceResponse'
      x-codegen-request-body-name: CreateResourceCommand
  /api/resources/archived:
    put:
      tags:
        - resources
      summary: 'Archive or unarchive resource (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: ArchivedCommand
  /api/resources/enabled:
    put:
      tags:
        - resources
      summary: 'Enable or disable resource (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: EnabledCommand
  /api/user-settings:
    get:
      tags:
        - user-settings
      summary: 'Get user settings (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/UserSettings'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/UserSettings'
            application/edn:
              schema:
                $ref: '#/components/schemas/UserSettings'
    put:
      tags:
        - user-settings
      summary: 'Update user settings, DEPRECATED, will disappear, use /edit instead (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserSettings'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/UpdateUserSettings'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/UpdateUserSettings'
          application/edn:
            schema:
              $ref: '#/components/schemas/UpdateUserSettings'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: UpdateUserSettings
  /api/user-settings/edit:
    put:
      tags:
        - user-settings
      summary: 'Update user settings (roles: logged-in)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserSettings'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/UpdateUserSettings'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/UpdateUserSettings'
          application/edn:
            schema:
              $ref: '#/components/schemas/UpdateUserSettings'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: UpdateUserSettings
  /api/user-settings/generate-ega-api-key:
    post:
      tags:
        - user-settings
      summary: 'Generates a new EGA API-key for the user. (roles: handler)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateEGAApiKeyResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/GenerateEGAApiKeyResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/GenerateEGAApiKeyResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/GenerateEGAApiKeyResponse'
  /api/user-settings/delete-ega-api-key:
    post:
      tags:
        - user-settings
      summary: 'Deletes the EGA API-key of the user. (roles: handler)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteEGAApiKeyResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/DeleteEGAApiKeyResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/DeleteEGAApiKeyResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/DeleteEGAApiKeyResponse'
  /api/users/create:
    post:
      tags:
        - users
      summary: 'Create or update user (roles: owner, user-owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: CreateUserCommand
  /api/users/edit:
    put:
      tags:
        - users
      summary: 'Update user (roles: owner, user-owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/EditUserCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/EditUserCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/EditUserCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: EditUserCommand
  /api/users/active:
    get:
      tags:
        - users
      summary: 'List active users (roles: owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithAttributes'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithAttributes'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithAttributes'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithAttributes'
  /api/workflows:
    get:
      tags:
        - workflows
      summary: 'Get workflows (roles: handler, organization-owner, owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: disabled
          in: query
          description: whether to include disabled workflows
          schema:
            type: boolean
        - name: archived
          in: query
          description: whether to include archived workflows
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /api/workflows/create:
    post:
      tags:
        - workflows
      summary: 'Create workflow (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkflowCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/CreateWorkflowCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/CreateWorkflowCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/CreateWorkflowCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWorkflowResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/CreateWorkflowResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/CreateWorkflowResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/CreateWorkflowResponse'
      x-codegen-request-body-name: CreateWorkflowCommand
  /api/workflows/edit:
    put:
      tags:
        - workflows
      summary: 'Edit workflow title and handlers (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditWorkflowCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/EditWorkflowCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/EditWorkflowCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/EditWorkflowCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: EditWorkflowCommand
  /api/workflows/archived:
    put:
      tags:
        - workflows
      summary: 'Archive or unarchive workflow (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/ArchivedCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: ArchivedCommand
  /api/workflows/enabled:
    put:
      tags:
        - workflows
      summary: 'Enable or disable workflow (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/transit+msgpack:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
          application/edn:
            schema:
              $ref: '#/components/schemas/EnabledCommand'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            application/edn:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      x-codegen-request-body-name: EnabledCommand
  /api/workflows/actors:
    get:
      tags:
        - workflows
      summary: 'List of available actors (roles: organization-owner, owner)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableActor'
            application/transit+msgpack:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableActor'
            application/transit+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableActor'
            application/edn:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableActor'
  /api/workflows/{workflow-id}:
    get:
      tags:
        - workflows
      summary: 'Get workflow by id (roles: handler, organization-owner, owner, reporter)'
      parameters:
        - name: x-rems-api-key
          in: header
          description: REMS API-Key (optional for UI, required for API)
          schema:
            type: string
        - name: x-rems-user-id
          in: header
          description: user (optional for UI, required for API). This can be a REMS internal or an external user identity attribute (specified in config.edn).
          schema:
            type: string
        - name: workflow-id
          in: path
          description: workflow-id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
            application/transit+msgpack:
              schema:
                $ref: '#/components/schemas/Workflow'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/Workflow'
            application/edn:
              schema:
                $ref: '#/components/schemas/Workflow'
components:
  schemas:
    AcceptInvitationResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        errors:
          type: array
          items:
            type: object
        invitation/workflow:
          $ref: '#/components/schemas/AcceptInvitationResponseWorkflow'
      additionalProperties: false
    AcceptInvitationResponseWorkflow:
      required:
        - workflow/id
      type: object
      properties:
        workflow/id:
          type: integer
          format: int64
      additionalProperties: false
    AcceptInvitationResult:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        errors:
          type: array
          items:
            type: object
        warnings:
          type: array
          items:
            type: object
        application-id:
          type: integer
          format: int64
      additionalProperties: false
    AcceptLicensesCommand:
      required:
        - accepted-licenses
        - application-id
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        accepted-licenses:
          type: array
          items:
            type: integer
            format: int64
      additionalProperties: false
    AddLicensesCommand:
      required:
        - application-id
        - licenses
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        licenses:
          type: array
          items:
            type: integer
            format: int64
      additionalProperties: false
    AddMemberCommand:
      required:
        - application-id
        - member
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        member:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    Applicant:
      required:
        - email
        - name
        - userid
      type: object
      properties:
        userid:
          type: string
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationId'
        notification-email:
          type: string
          nullable: true
        researcher-status-by:
          type: string
      additionalProperties:
        type: object
    Application:
      required:
        - application/accepted-licenses
        - application/applicant
        - application/attachments
        - application/created
        - application/description
        - application/events
        - application/external-id
        - application/forms
        - application/id
        - application/invited-members
        - application/last-activity
        - application/licenses
        - application/members
        - application/modified
        - application/permissions
        - application/resources
        - application/roles
        - application/state
        - application/todo
        - application/workflow
      type: object
      properties:
        application/workflow:
          $ref: '#/components/schemas/ApplicationWorkflow'
        application/external-id:
          type: string
          description: Assigned external id if it exists, otherwise the generated one
        application/first-submitted:
          type: string
          format: date-time
        application/blacklist:
          type: array
          description: Which members of this application are blacklisted for which resources
          items:
            $ref: '#/components/schemas/BlacklistEntry'
        application/id:
          type: integer
          format: int64
        application/duo:
          $ref: '#/components/schemas/ApplicationDuo'
        application/assigned-external-id:
          type: string
        application/applicant:
          $ref: '#/components/schemas/UserWithAttributes'
        application/copied-from:
          $ref: '#/components/schemas/ApplicationCopiedFrom'
        application/todo:
          type: string
          nullable: true
          enum:
            - no-pending-requests
            - new-application
            - resubmitted-application
            - waiting-for-your-decision
            - waiting-for-review
            - waiting-for-your-review
            - waiting-for-decision
        application/members:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserWithAttributes'
        entitlement/end:
          type: string
          format: date-time
          nullable: true
        application/resources:
          type: array
          items:
            $ref: '#/components/schemas/V2Resource'
        application/deadline:
          type: string
          format: date-time
        application/accepted-licenses:
          $ref: '#/components/schemas/ApplicationAcceptedLicenses'
        application/forms:
          type: array
          items:
            $ref: '#/components/schemas/Form'
        application/invited-members:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ApplicationInvitedMembers'
        application/description:
          type: string
        application/votes:
          $ref: '#/components/schemas/ApplicationVotes'
        application/generated-external-id:
          type: string
        application/permissions:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - application.command/copy-as-new
              - application.command/invite-member
              - application.command/submit
              - application.command/invite-decider
              - application.command/request-review
              - see-everything
              - application.command/redact-attachments
              - application.command/invite-reviewer
              - application.command/change-applicant
              - application.command/review
              - application.command/reject
              - application.command/add-licenses
              - application.command/remove-member
              - application.command/revoke
              - application.command/vote
              - application.command/request-decision
              - application.command/accept-licenses
              - application.command/accept-invitation
              - application.command/decide
              - application.command/uninvite-member
              - application.command/remark
              - application.command/send-expiration-notifications
              - application.command/add-member
              - application.command/delete
              - application.command/save-draft
              - application.command/approve
              - application.command/return
              - application.command/assign-external-id
              - application.command/close
              - application.command/change-resources
              - application.command/create
        application/last-activity:
          type: string
          format: date-time
        application/events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        application/roles:
          uniqueItems: true
          type: array
          items:
            type: string
        application/attachments:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationAttachment'
        application/licenses:
          type: array
          items:
            $ref: '#/components/schemas/V2License'
        application/created:
          type: string
          format: date-time
        application/state:
          type: string
        application/copied-to:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationCopiedTo'
        application/modified:
          type: string
          format: date-time
      additionalProperties: false
    ApplicationAcceptedLicenses:
      type: object
      additionalProperties:
        uniqueItems: true
        type: array
        items:
          type: integer
          format: int64
    ApplicationAttachment:
      required:
        - attachment/filename
        - attachment/id
        - attachment/type
      type: object
      properties:
        attachment/id:
          type: integer
          format: int64
        attachment/filename:
          type: object
          x-oneOf:
            - type: string
            - type: string
              enum:
                - filename/redacted
        attachment/type:
          type: string
        attachment/event:
          $ref: '#/components/schemas/Response10953AttachmentsEvent'
        attachment/user:
          $ref: '#/components/schemas/UserWithAttributes'
        attachment/redacted:
          type: boolean
        attachment/can-redact:
          type: boolean
      additionalProperties: false
    ApplicationAttachmentsEvent:
      required:
        - event/id
      type: object
      properties:
        event/id:
          type: integer
          format: int64
      additionalProperties: false
    ApplicationBlacklistResource:
      required:
        - resource/ext-id
      type: object
      properties:
        resource/ext-id:
          type: string
      additionalProperties: false
    ApplicationCopiedFrom:
      required:
        - application/external-id
        - application/id
      type: object
      properties:
        application/id:
          type: integer
          format: int64
        application/external-id:
          type: string
      additionalProperties: false
    ApplicationCopiedTo:
      required:
        - application/external-id
        - application/id
      type: object
      properties:
        application/id:
          type: integer
          format: int64
        application/external-id:
          type: string
      additionalProperties: false
    ApplicationDuo:
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
        duo/matches:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeMatch'
      additionalProperties: false
    ApplicationDuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/ApplicationDuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    ApplicationDuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    ApplicationDuoMatchesLabel:
      type: object
      additionalProperties:
        type: object
    ApplicationDuoMatchesValidation:
      required:
        - validity
      type: object
      properties:
        validity:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationDuoMatchesValidationErrors'
      additionalProperties: false
    ApplicationDuoMatchesValidationErrors:
      required:
        - type
      type: object
      properties:
        type:
          type: string
      additionalProperties:
        type: object
    ApplicationFormsFieldsColumns:
      required:
        - key
        - label
      type: object
      properties:
        key:
          type: string
        label:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    ApplicationFormsFieldsOptions:
      required:
        - key
        - label
      type: object
      properties:
        key:
          type: string
        label:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    ApplicationFormsFieldsPreviousValue:
      required:
        - column
        - value
      type: object
      properties:
        column:
          type: string
        value:
          type: string
      additionalProperties: false
    ApplicationFormsFieldsValue:
      required:
        - column
        - value
      type: object
      properties:
        column:
          type: string
        value:
          type: string
      additionalProperties: false
    ApplicationFormsFieldsVisibility:
      required:
        - visibility/type
      type: object
      properties:
        visibility/type:
          type: string
          enum:
            - only-if
            - always
        visibility/field:
          $ref: '#/components/schemas/ApplicationFormsFieldsVisibilityField'
        visibility/values:
          type: array
          items:
            type: string
      additionalProperties: false
      description: Always visible by default
    ApplicationFormsFieldsVisibilityField:
      required:
        - field/id
      type: object
      properties:
        field/id:
          type: string
      additionalProperties: false
    ApplicationInvitedMembers:
      required:
        - email
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      additionalProperties: false
    ApplicationOverview:
      required:
        - application/accepted-licenses
        - application/applicant
        - application/attachments
        - application/created
        - application/description
        - application/external-id
        - application/id
        - application/invited-members
        - application/last-activity
        - application/members
        - application/modified
        - application/permissions
        - application/resources
        - application/roles
        - application/state
        - application/todo
        - application/workflow
      type: object
      properties:
        application/workflow:
          $ref: '#/components/schemas/Response10953Workflow'
        application/external-id:
          type: string
          description: Assigned external id if it exists, otherwise the generated one
        application/first-submitted:
          type: string
          format: date-time
        application/blacklist:
          type: array
          description: Which members of this application are blacklisted for which resources
          items:
            $ref: '#/components/schemas/BlacklistEntry'
        application/id:
          type: integer
          format: int64
        application/duo:
          $ref: '#/components/schemas/Response10953Duo'
        application/assigned-external-id:
          type: string
        application/applicant:
          $ref: '#/components/schemas/UserWithAttributes'
        application/copied-from:
          $ref: '#/components/schemas/Response10953CopiedFrom'
        application/todo:
          type: string
          nullable: true
          enum:
            - no-pending-requests
            - new-application
            - resubmitted-application
            - waiting-for-your-decision
            - waiting-for-review
            - waiting-for-your-review
            - waiting-for-decision
        application/members:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserWithAttributes'
        entitlement/end:
          type: string
          format: date-time
          nullable: true
        application/resources:
          type: array
          items:
            $ref: '#/components/schemas/V2Resource'
        application/deadline:
          type: string
          format: date-time
        application/accepted-licenses:
          $ref: '#/components/schemas/Response10953AcceptedLicenses'
        application/invited-members:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Response10953InvitedMembers'
        application/description:
          type: string
        application/votes:
          $ref: '#/components/schemas/Response10953Votes'
        application/generated-external-id:
          type: string
        application/permissions:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - application.command/copy-as-new
              - application.command/invite-member
              - application.command/submit
              - application.command/invite-decider
              - application.command/request-review
              - see-everything
              - application.command/redact-attachments
              - application.command/invite-reviewer
              - application.command/change-applicant
              - application.command/review
              - application.command/reject
              - application.command/add-licenses
              - application.command/remove-member
              - application.command/revoke
              - application.command/vote
              - application.command/request-decision
              - application.command/accept-licenses
              - application.command/accept-invitation
              - application.command/decide
              - application.command/uninvite-member
              - application.command/remark
              - application.command/send-expiration-notifications
              - application.command/add-member
              - application.command/delete
              - application.command/save-draft
              - application.command/approve
              - application.command/return
              - application.command/assign-external-id
              - application.command/close
              - application.command/change-resources
              - application.command/create
        application/last-activity:
          type: string
          format: date-time
        application/roles:
          uniqueItems: true
          type: array
          items:
            type: string
        application/attachments:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationAttachment'
        application/created:
          type: string
          format: date-time
        application/state:
          type: string
        application/copied-to:
          type: array
          items:
            $ref: '#/components/schemas/Response10953CopiedTo'
        application/modified:
          type: string
          format: date-time
      additionalProperties: false
    ApplicationRaw:
      required:
        - application/accepted-licenses
        - application/applicant
        - application/attachments
        - application/created
        - application/description
        - application/events
        - application/external-id
        - application/forms
        - application/id
        - application/invited-members
        - application/last-activity
        - application/licenses
        - application/members
        - application/modified
        - application/resources
        - application/role-permissions
        - application/state
        - application/todo
        - application/user-roles
        - application/workflow
      type: object
      properties:
        application/user-roles:
          $ref: '#/components/schemas/ApplicationRawUserRoles'
        application/workflow:
          $ref: '#/components/schemas/ApplicationRawWorkflow'
        application/external-id:
          type: string
          description: Assigned external id if it exists, otherwise the generated one
        application/first-submitted:
          type: string
          format: date-time
        application/blacklist:
          type: array
          description: Which members of this application are blacklisted for which resources
          items:
            $ref: '#/components/schemas/BlacklistEntry'
        application/id:
          type: integer
          format: int64
        application/duo:
          $ref: '#/components/schemas/ApplicationRawDuo'
        application/assigned-external-id:
          type: string
        application/applicant:
          $ref: '#/components/schemas/UserWithAttributes'
        application/copied-from:
          $ref: '#/components/schemas/ApplicationRawCopiedFrom'
        application/todo:
          type: string
          nullable: true
          enum:
            - no-pending-requests
            - new-application
            - resubmitted-application
            - waiting-for-your-decision
            - waiting-for-review
            - waiting-for-your-review
            - waiting-for-decision
        application/members:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserWithAttributes'
        entitlement/end:
          type: string
          format: date-time
          nullable: true
        application/resources:
          type: array
          items:
            $ref: '#/components/schemas/V2Resource'
        application/deadline:
          type: string
          format: date-time
        application/accepted-licenses:
          $ref: '#/components/schemas/ApplicationRawAcceptedLicenses'
        application/forms:
          type: array
          items:
            $ref: '#/components/schemas/Form'
        application/invited-members:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRawInvitedMembers'
        application/description:
          type: string
        application/votes:
          $ref: '#/components/schemas/ApplicationRawVotes'
        application/generated-external-id:
          type: string
        application/last-activity:
          type: string
          format: date-time
        application/events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        application/attachments:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationAttachment'
        application/licenses:
          type: array
          items:
            $ref: '#/components/schemas/V2License'
        application/created:
          type: string
          format: date-time
        application/role-permissions:
          $ref: '#/components/schemas/ApplicationRawRolePermissions'
        application/state:
          type: string
        application/copied-to:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRawCopiedTo'
        application/modified:
          type: string
          format: date-time
      additionalProperties: false
    ApplicationRawAcceptedLicenses:
      type: object
      additionalProperties:
        uniqueItems: true
        type: array
        items:
          type: integer
          format: int64
    ApplicationRawAttachmentsEvent:
      required:
        - event/id
      type: object
      properties:
        event/id:
          type: integer
          format: int64
      additionalProperties: false
    ApplicationRawBlacklistResource:
      required:
        - resource/ext-id
      type: object
      properties:
        resource/ext-id:
          type: string
      additionalProperties: false
    ApplicationRawCopiedFrom:
      required:
        - application/external-id
        - application/id
      type: object
      properties:
        application/id:
          type: integer
          format: int64
        application/external-id:
          type: string
      additionalProperties: false
    ApplicationRawCopiedTo:
      required:
        - application/external-id
        - application/id
      type: object
      properties:
        application/id:
          type: integer
          format: int64
        application/external-id:
          type: string
      additionalProperties: false
    ApplicationRawDuo:
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
        duo/matches:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeMatch'
      additionalProperties: false
    ApplicationRawDuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/ApplicationRawDuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    ApplicationRawDuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    ApplicationRawDuoMatchesLabel:
      type: object
      additionalProperties:
        type: object
    ApplicationRawDuoMatchesValidation:
      required:
        - validity
      type: object
      properties:
        validity:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRawDuoMatchesValidationErrors'
      additionalProperties: false
    ApplicationRawDuoMatchesValidationErrors:
      required:
        - type
      type: object
      properties:
        type:
          type: string
      additionalProperties:
        type: object
    ApplicationRawFormsFieldsColumns:
      required:
        - key
        - label
      type: object
      properties:
        key:
          type: string
        label:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    ApplicationRawFormsFieldsOptions:
      required:
        - key
        - label
      type: object
      properties:
        key:
          type: string
        label:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    ApplicationRawFormsFieldsPreviousValue:
      required:
        - column
        - value
      type: object
      properties:
        column:
          type: string
        value:
          type: string
      additionalProperties: false
    ApplicationRawFormsFieldsValue:
      required:
        - column
        - value
      type: object
      properties:
        column:
          type: string
        value:
          type: string
      additionalProperties: false
    ApplicationRawFormsFieldsVisibility:
      required:
        - visibility/type
      type: object
      properties:
        visibility/type:
          type: string
          enum:
            - only-if
            - always
        visibility/field:
          $ref: '#/components/schemas/ApplicationRawFormsFieldsVisibilityField'
        visibility/values:
          type: array
          items:
            type: string
      additionalProperties: false
      description: Always visible by default
    ApplicationRawFormsFieldsVisibilityField:
      required:
        - field/id
      type: object
      properties:
        field/id:
          type: string
      additionalProperties: false
    ApplicationRawInvitedMembers:
      required:
        - email
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      additionalProperties: false
    ApplicationRawResourcesDuo:
      required:
        - duo/codes
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
      additionalProperties: false
    ApplicationRawResourcesDuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/ApplicationRawResourcesDuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    ApplicationRawResourcesDuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    ApplicationRawRolePermissions:
      type: object
      additionalProperties:
        uniqueItems: true
        type: array
        items:
          type: string
    ApplicationRawUserRoles:
      type: object
      additionalProperties:
        uniqueItems: true
        type: array
        items:
          type: string
    ApplicationRawVotes:
      type: object
      additionalProperties:
        type: string
    ApplicationRawWorkflow:
      required:
        - workflow/id
        - workflow/type
      type: object
      properties:
        workflow/id:
          type: integer
          format: int64
        workflow/type:
          type: string
        workflow.dynamic/handlers:
          type: array
          items:
            $ref: '#/components/schemas/Handler'
        workflow/voting:
          $ref: '#/components/schemas/WorkflowVoting'
        workflow/anonymize-handling:
          type: boolean
      additionalProperties: false
    ApplicationResourcesDuo:
      required:
        - duo/codes
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
      additionalProperties: false
    ApplicationResourcesDuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/ApplicationResourcesDuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    ApplicationResourcesDuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    ApplicationVotes:
      type: object
      additionalProperties:
        type: string
    ApplicationWorkflow:
      required:
        - workflow/id
        - workflow/type
      type: object
      properties:
        workflow/id:
          type: integer
          format: int64
        workflow/type:
          type: string
        workflow.dynamic/handlers:
          type: array
          items:
            $ref: '#/components/schemas/Handler'
        workflow/voting:
          $ref: '#/components/schemas/WorkflowVoting'
        workflow/anonymize-handling:
          type: boolean
      additionalProperties: false
    ApproveCommand:
      required:
        - application-id
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        entitlement-end:
          type: string
          format: date-time
      additionalProperties: false
    ArchivedCommand:
      required:
        - archived
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        archived:
          type: boolean
      additionalProperties: false
    AssignExternalIdCommand:
      required:
        - application-id
        - external-id
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        external-id:
          type: string
      additionalProperties: false
    AttachmentMetadata:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
      additionalProperties: false
    AuditLogEntry:
      required:
        - apikey
        - method
        - path
        - status
        - time
        - userid
      type: object
      properties:
        time:
          type: string
          format: date-time
        path:
          type: string
        method:
          type: string
        apikey:
          type: string
          nullable: true
        userid:
          type: string
          nullable: true
        status:
          type: string
      additionalProperties: false
    AvailableActor:
      required:
        - email
        - name
        - userid
      type: object
      properties:
        userid:
          type: string
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationId'
        notification-email:
          type: string
          nullable: true
        researcher-status-by:
          type: string
      additionalProperties:
        type: object
    AvailableOwner:
      required:
        - email
        - name
        - userid
      type: object
      properties:
        userid:
          type: string
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationId'
        notification-email:
          type: string
          nullable: true
        researcher-status-by:
          type: string
      additionalProperties:
        type: object
    BlacklistCommand:
      required:
        - blacklist/resource
        - blacklist/user
        - comment
      type: object
      properties:
        blacklist/resource:
          $ref: '#/components/schemas/BlacklistCommandResource'
        blacklist/user:
          $ref: '#/components/schemas/User'
        comment:
          type: string
      additionalProperties: false
    BlacklistCommandResource:
      required:
        - resource/ext-id
      type: object
      properties:
        resource/ext-id:
          type: string
      additionalProperties: false
    BlacklistEntry:
      required:
        - blacklist/resource
        - blacklist/user
      type: object
      properties:
        blacklist/user:
          $ref: '#/components/schemas/UserWithAttributes'
        blacklist/resource:
          $ref: '#/components/schemas/Response10953BlacklistResource'
      additionalProperties: false
    BlacklistEntryWithDetails:
      required:
        - blacklist/added-at
        - blacklist/added-by
        - blacklist/comment
        - blacklist/resource
        - blacklist/user
      type: object
      properties:
        blacklist/user:
          $ref: '#/components/schemas/UserWithAttributes'
        blacklist/resource:
          $ref: '#/components/schemas/Response11096Resource'
        blacklist/comment:
          type: string
        blacklist/added-by:
          $ref: '#/components/schemas/UserWithAttributes'
        blacklist/added-at:
          type: string
          format: date-time
      additionalProperties: false
    CatalogueItem:
      required:
        - archived
        - enabled
        - end
        - expired
        - formid
        - id
        - localizations
        - organization
        - resid
        - resource-id
        - start
        - wfid
      type: object
      properties:
        archived:
          type: boolean
        localizations:
          $ref: '#/components/schemas/CatalogueItemLocalizations'
        resource-id:
          type: integer
          format: int64
        start:
          type: string
          format: date-time
        resource-name:
          type: string
        form-name:
          type: string
          nullable: true
        organization:
          $ref: '#/components/schemas/OrganizationOverview'
        wfid:
          type: integer
          format: int64
        resid:
          type: string
        formid:
          type: integer
          format: int64
          nullable: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        workflow-name:
          type: string
        id:
          type: integer
          format: int64
        expired:
          type: boolean
        end:
          type: string
          format: date-time
          nullable: true
        enabled:
          type: boolean
      additionalProperties: false
    CatalogueItemLocalization:
      required:
        - title
      type: object
      properties:
        title:
          type: string
        infourl:
          type: string
          nullable: true
      additionalProperties: false
    CatalogueItemLocalizations:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/GetCatalogueResponseLocalizationsKeyword11103'
    CatalogueItemLocalizationsKeyword11126:
      required:
        - id
        - infourl
        - langcode
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        langcode:
          type: string
        title:
          type: string
        infourl:
          type: string
          nullable: true
      additionalProperties: false
    Category:
      required:
        - category/id
        - category/title
      type: object
      properties:
        category/id:
          type: integer
          format: int64
        category/title:
          $ref: '#/components/schemas/LocalizedString'
        category/description:
          $ref: '#/components/schemas/LocalizedString'
        category/display-order:
          type: integer
          format: int64
        category/children:
          type: array
          items:
            $ref: '#/components/schemas/CategoryId'
      additionalProperties: false
    CategoryFull:
      required:
        - category/id
        - category/title
      type: object
      properties:
        category/id:
          type: integer
          format: int64
        category/title:
          $ref: '#/components/schemas/LocalizedString'
        category/description:
          $ref: '#/components/schemas/LocalizedString'
        category/display-order:
          type: integer
          format: int64
        category/children:
          type: array
          items:
            $ref: '#/components/schemas/Category'
      additionalProperties: false
    CategoryId:
      required:
        - category/id
      type: object
      properties:
        category/id:
          type: integer
          format: int64
      additionalProperties: false
    CategoryTree:
      required:
        - category/id
        - category/title
      type: object
      properties:
        category/id:
          type: integer
          format: int64
        category/title:
          $ref: '#/components/schemas/LocalizedString'
        category/description:
          $ref: '#/components/schemas/LocalizedString'
        category/display-order:
          type: integer
          format: int64
        category/children:
          type: array
          items:
            $ref: '#/components/schemas/CategoryTree'
        category/items:
          type: array
          items:
            $ref: '#/components/schemas/CatalogueItem'
      additionalProperties: false
    ChangeApplicantCommand:
      required:
        - application-id
        - member
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        member:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    ChangeFormCommand:
      required:
        - form
      type: object
      properties:
        form:
          type: integer
          description: new form id
          format: int64
          nullable: true
      additionalProperties: false
    ChangeFormResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        catalogue-item-id:
          type: integer
          format: int64
        errors:
          type: array
          items:
            type: object
      additionalProperties: false
    ChangeResourcesCommand:
      required:
        - application-id
        - catalogue-item-ids
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        catalogue-item-ids:
          type: array
          items:
            type: integer
            format: int64
      additionalProperties: false
    CloseCommand:
      required:
        - application-id
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
      additionalProperties: false
    CommandAttachment:
      required:
        - attachment/id
      type: object
      properties:
        attachment/id:
          type: integer
          format: int64
      additionalProperties: false
    CopyAsNewCommand:
      required:
        - application-id
      type: object
      properties:
        application-id:
          type: integer
          format: int64
      additionalProperties: false
    CopyAsNewResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        errors:
          type: array
          items:
            type: object
        warnings:
          type: array
          items:
            type: object
        application-id:
          type: integer
          format: int64
      additionalProperties: false
    CreateApplicationCommand:
      required:
        - catalogue-item-ids
      type: object
      properties:
        catalogue-item-ids:
          type: array
          items:
            type: integer
            format: int64
      additionalProperties: false
    CreateApplicationResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        errors:
          type: array
          items:
            type: object
        warnings:
          type: array
          items:
            type: object
        application-id:
          type: integer
          format: int64
      additionalProperties: false
    CreateCatalogueItemCommand:
      required:
        - localizations
        - organization
        - resid
        - wfid
      type: object
      properties:
        form:
          type: integer
          format: int64
          nullable: true
        resid:
          type: integer
          format: int64
        wfid:
          type: integer
          format: int64
        organization:
          $ref: '#/components/schemas/OrganizationId'
        localizations:
          $ref: '#/components/schemas/WriteCatalogueItemLocalizations'
        enabled:
          type: boolean
        archived:
          type: boolean
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryId'
      additionalProperties: false
    CreateCatalogueItemResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        id:
          type: integer
          format: int64
        errors:
          type: array
          items:
            type: object
      additionalProperties: false
    CreateCategoryCommand:
      required:
        - category/title
      type: object
      properties:
        category/title:
          $ref: '#/components/schemas/LocalizedString'
        category/description:
          $ref: '#/components/schemas/LocalizedString'
        category/display-order:
          type: integer
          format: int64
        category/children:
          type: array
          items:
            $ref: '#/components/schemas/CategoryId'
      additionalProperties: false
    CreateFormCommand:
      required:
        - form/fields
        - organization
      type: object
      properties:
        organization:
          $ref: '#/components/schemas/OrganizationId'
        form/title:
          type: string
          description: DEPRECATED, use internal name and external title instead
          nullable: true
        form/internal-name:
          type: string
        form/external-title:
          $ref: '#/components/schemas/LocalizedString'
        form/fields:
          type: array
          items:
            $ref: '#/components/schemas/NewFieldTemplate'
      additionalProperties: false
    CreateFormCommandFieldsColumns:
      required:
        - key
        - label
      type: object
      properties:
        key:
          type: string
        label:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    CreateFormCommandFieldsOptions:
      required:
        - key
        - label
      type: object
      properties:
        key:
          type: string
        label:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    CreateFormCommandFieldsVisibility:
      required:
        - visibility/type
      type: object
      properties:
        visibility/type:
          type: string
          enum:
            - only-if
            - always
        visibility/field:
          $ref: '#/components/schemas/CreateFormCommandFieldsVisibilityField'
        visibility/values:
          type: array
          items:
            type: string
      additionalProperties: false
      description: Always visible by default
    CreateFormCommandFieldsVisibilityField:
      required:
        - field/id
      type: object
      properties:
        field/id:
          type: string
      additionalProperties: false
    CreateFormResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        id:
          type: integer
          format: int64
        errors:
          type: array
          items:
            type: object
      additionalProperties: false
    CreateInvitationCommand:
      required:
        - email
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        workflow-id:
          type: integer
          format: int64
      additionalProperties: false
    CreateInvitationResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        invitation/id:
          type: integer
          format: int64
        errors:
          type: array
          items:
            type: object
      additionalProperties: false
    CreateLicenseCommand:
      required:
        - licensetype
        - localizations
        - organization
      type: object
      properties:
        licensetype:
          type: string
          enum:
            - attachment
            - text
            - link
        organization:
          $ref: '#/components/schemas/OrganizationId'
        localizations:
          $ref: '#/components/schemas/LicenseLocalizations'
      additionalProperties: false
    CreateLicenseResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        id:
          type: integer
          format: int64
        errors:
          type: array
          items:
            type: object
      additionalProperties: false
    CreateOrganizationCommand:
      required:
        - organization/id
        - organization/name
        - organization/short-name
      type: object
      properties:
        archived:
          type: boolean
        organization/id:
          type: string
        organization/short-name:
          $ref: '#/components/schemas/LocalizedString'
        organization/review-emails:
          type: array
          items:
            $ref: '#/components/schemas/CreateOrganizationCommandReviewEmails'
        enabled:
          type: boolean
        organization/owners:
          type: array
          items:
            $ref: '#/components/schemas/User'
        organization/modifier:
          $ref: '#/components/schemas/UserWithAttributes'
        organization/last-modified:
          type: string
          format: date-time
        organization/name:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    CreateOrganizationCommandReviewEmails:
      required:
        - email
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        email:
          type: string
      additionalProperties: false
    CreateOrganizationResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        organization/id:
          type: string
        errors:
          type: array
          items:
            type: object
      additionalProperties: false
    CreateResourceCommand:
      required:
        - licenses
        - organization
        - resid
      type: object
      properties:
        resid:
          type: string
        organization:
          $ref: '#/components/schemas/OrganizationId'
        licenses:
          type: array
          items:
            type: integer
            format: int64
        resource/duo:
          $ref: '#/components/schemas/CreateResourceCommandDuo'
      additionalProperties: false
    CreateResourceCommandDuo:
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCode'
      additionalProperties: false
    CreateResourceCommandDuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/CreateResourceCommandDuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    CreateResourceCommandDuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    CreateResourceResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        id:
          type: integer
          format: int64
        errors:
          type: array
          items:
            type: object
      additionalProperties: false
    CreateUserCommand:
      required:
        - email
        - name
        - userid
      type: object
      properties:
        userid:
          type: string
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationId'
      additionalProperties:
        type: object
    CreateWorkflowCommand:
      required:
        - organization
        - title
        - type
      type: object
      properties:
        anonymize-handling:
          type: boolean
          nullable: true
        disable-commands:
          type: array
          items:
            $ref: '#/components/schemas/DisableCommandRule'
        licenses:
          type: array
          items:
            $ref: '#/components/schemas/LicenseId'
        type:
          type: string
          enum:
            - workflow/decider
            - workflow/default
            - workflow/master
        organization:
          $ref: '#/components/schemas/OrganizationId'
        handlers:
          type: array
          items:
            type: string
        title:
          type: string
        voting:
          $ref: '#/components/schemas/WorkflowVoting'
        forms:
          type: array
          items:
            $ref: '#/components/schemas/CreateWorkflowCommandForms'
      additionalProperties: false
    CreateWorkflowCommandForms:
      required:
        - form/id
      type: object
      properties:
        form/id:
          type: integer
          format: int64
      additionalProperties: false
    CreateWorkflowResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        id:
          type: integer
          format: int64
        errors:
          type: array
          items:
            type: object
      additionalProperties: false
    DecideCommand:
      required:
        - application-id
        - decision
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        decision:
          type: string
          enum:
            - rejected
            - approved
      additionalProperties: false
    Decider:
      required:
        - email
        - name
        - userid
      type: object
      properties:
        userid:
          type: string
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationId'
        notification-email:
          type: string
          nullable: true
        researcher-status-by:
          type: string
      additionalProperties:
        type: object
    DeleteCategoryCommand:
      required:
        - category/id
      type: object
      properties:
        category/id:
          type: integer
          format: int64
      additionalProperties: false
    DeleteCommand:
      required:
        - application-id
      type: object
      properties:
        application-id:
          type: integer
          format: int64
      additionalProperties: false
    DeleteEGAApiKeyResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
      additionalProperties: false
    DisableCommandRule:
      required:
        - command
      type: object
      properties:
        command:
          type: string
        when/state:
          type: array
          items:
            type: string
        when/role:
          type: array
          items:
            type: string
      additionalProperties: false
    DuoCode:
      required:
        - id
      type: object
      properties:
        id:
          type: string
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/ValidateRequestDuoCodesRestrictions'
        more-info:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    DuoCodeFull:
      required:
        - description
        - id
        - label
      type: object
      properties:
        id:
          type: string
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Response10953ResourcesDuoCodesRestrictions'
        more-info:
          $ref: '#/components/schemas/LocalizedString'
        shorthand:
          type: string
          nullable: true
        label:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    DuoCodeMatch:
      required:
        - duo/id
        - duo/label
        - duo/shorthand
        - duo/validation
        - resource/id
      type: object
      properties:
        duo/id:
          type: string
        duo/shorthand:
          type: string
        duo/label:
          $ref: '#/components/schemas/Response10953DuoMatchesLabel'
        resource/id:
          type: integer
          format: int64
        duo/validation:
          $ref: '#/components/schemas/Response10953DuoMatchesValidation'
      additionalProperties: false
    EditCatalogueItemCommand:
      required:
        - id
        - localizations
      type: object
      properties:
        id:
          type: integer
          format: int64
        localizations:
          $ref: '#/components/schemas/WriteCatalogueItemLocalizations'
        organization:
          $ref: '#/components/schemas/OrganizationId'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryId'
      additionalProperties: false
    EditFormCommand:
      required:
        - form/fields
        - form/id
        - organization
      type: object
      properties:
        organization:
          $ref: '#/components/schemas/OrganizationId'
        form/title:
          type: string
          description: DEPRECATED, use internal name and external title instead
          nullable: true
        form/internal-name:
          type: string
        form/external-title:
          $ref: '#/components/schemas/LocalizedString'
        form/fields:
          type: array
          items:
            $ref: '#/components/schemas/NewFieldTemplate'
        form/id:
          type: integer
          format: int64
      additionalProperties: false
    EditFormCommandFieldsColumns:
      required:
        - key
        - label
      type: object
      properties:
        key:
          type: string
        label:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    EditFormCommandFieldsOptions:
      required:
        - key
        - label
      type: object
      properties:
        key:
          type: string
        label:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    EditFormCommandFieldsVisibility:
      required:
        - visibility/type
      type: object
      properties:
        visibility/type:
          type: string
          enum:
            - only-if
            - always
        visibility/field:
          $ref: '#/components/schemas/EditFormCommandFieldsVisibilityField'
        visibility/values:
          type: array
          items:
            type: string
      additionalProperties: false
      description: Always visible by default
    EditFormCommandFieldsVisibilityField:
      required:
        - field/id
      type: object
      properties:
        field/id:
          type: string
      additionalProperties: false
    EditOrganizationCommand:
      required:
        - organization/id
        - organization/name
        - organization/short-name
      type: object
      properties:
        archived:
          type: boolean
        organization/id:
          type: string
        organization/short-name:
          $ref: '#/components/schemas/LocalizedString'
        organization/review-emails:
          type: array
          items:
            $ref: '#/components/schemas/EditOrganizationCommandReviewEmails'
        enabled:
          type: boolean
        organization/owners:
          type: array
          items:
            $ref: '#/components/schemas/User'
        organization/modifier:
          $ref: '#/components/schemas/UserWithAttributes'
        organization/last-modified:
          type: string
          format: date-time
        organization/name:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    EditOrganizationCommandReviewEmails:
      required:
        - email
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        email:
          type: string
      additionalProperties: false
    EditOrganizationResponse:
      required:
        - organization/id
        - success
      type: object
      properties:
        success:
          type: boolean
        organization/id:
          type: string
        errors:
          type: array
          items:
            type: object
      additionalProperties: false
    EditUserCommand:
      required:
        - email
        - name
        - userid
      type: object
      properties:
        userid:
          type: string
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationId'
      additionalProperties:
        type: object
    EditWorkflowCommand:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        organization:
          $ref: '#/components/schemas/OrganizationId'
        title:
          type: string
        handlers:
          type: array
          items:
            type: string
        disable-commands:
          type: array
          items:
            $ref: '#/components/schemas/DisableCommandRule'
        voting:
          $ref: '#/components/schemas/WorkflowVoting'
        anonymize-handling:
          type: boolean
          nullable: true
      additionalProperties: false
    EnabledCommand:
      required:
        - enabled
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        enabled:
          type: boolean
      additionalProperties: false
    Entitlement:
      required:
        - application-id
        - end
        - mail
        - resource
        - start
        - user
      type: object
      properties:
        resource:
          type: string
        user:
          $ref: '#/components/schemas/UserWithAttributes'
        application-id:
          type: integer
          format: int64
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
          nullable: true
        mail:
          type: string
          description: DEPRECATED, will disappear
          nullable: true
      additionalProperties: false
    Event:
      required:
        - application/id
        - event/actor
        - event/actor-attributes
        - event/time
        - event/type
      type: object
      properties:
        event/id:
          type: integer
          format: int64
        event/type:
          type: string
        event/time:
          type: string
          format: date-time
        event/actor:
          type: string
        application/id:
          type: integer
          format: int64
        event/actor-attributes:
          $ref: '#/components/schemas/UserWithAttributes'
      additionalProperties:
        type: object
    ExtraPage:
      required:
        - id
      type: object
      properties:
        id:
          type: string
        filename:
          type: string
        url:
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
        show-menu:
          type: boolean
        show-footer:
          type: boolean
        heading:
          type: boolean
        translations:
          $ref: '#/components/schemas/GetConfigResponseExtraPagesTranslations'
      additionalProperties: false
    ExtraPageResponse:
      type: object
      additionalProperties:
        type: string
        nullable: true
    Field:
      required:
        - field/id
        - field/optional
        - field/private
        - field/title
        - field/type
        - field/value
        - field/visible
      type: object
      properties:
        field/private:
          type: boolean
        field/info-text:
          $ref: '#/components/schemas/LocalizedString'
        field/title:
          $ref: '#/components/schemas/LocalizedString'
        field/columns:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationFormsFieldsColumns'
        field/max-length:
          type: integer
          format: int64
          nullable: true
        field/options:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationFormsFieldsOptions'
        field/privacy:
          type: string
          description: Public by default
          enum:
            - private
            - public
        field/visible:
          type: boolean
        field/visibility:
          $ref: '#/components/schemas/ApplicationFormsFieldsVisibility'
        field/type:
          type: string
          enum:
            - description
            - email
            - date
            - phone-number
            - table
            - header
            - texta
            - option
            - label
            - multiselect
            - ip-address
            - attachment
            - text
        field/value:
          type: object
          description: 'A string for most fields, or [[{"column": string, "value": string}]] for table fields'
          example: value
          x-oneOf:
            - type: string
            - type: array
              items:
                type: array
                items:
                  $ref: '#/definitions/ApplicationFormsFieldsValue'
        field/previous-value:
          type: object
          description: 'A string for most fields, or [[{"column": string, "value": string}]] for table fields'
          example: value
          x-oneOf:
            - type: string
            - type: array
              items:
                type: array
                items:
                  $ref: '#/definitions/ApplicationFormsFieldsPreviousValue'
        field/id:
          type: string
        field/optional:
          type: boolean
        field/placeholder:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    FieldTemplate:
      required:
        - field/id
        - field/optional
        - field/title
        - field/type
      type: object
      properties:
        field/info-text:
          $ref: '#/components/schemas/LocalizedString'
        field/title:
          $ref: '#/components/schemas/LocalizedString'
        field/columns:
          type: array
          items:
            $ref: '#/components/schemas/FormTemplateFieldsColumns'
        field/max-length:
          type: integer
          format: int64
          nullable: true
        field/options:
          type: array
          items:
            $ref: '#/components/schemas/FormTemplateFieldsOptions'
        field/privacy:
          type: string
          description: Public by default
          enum:
            - private
            - public
        field/visibility:
          $ref: '#/components/schemas/FormTemplateFieldsVisibility'
        field/type:
          type: string
          enum:
            - description
            - email
            - date
            - phone-number
            - table
            - header
            - texta
            - option
            - label
            - multiselect
            - ip-address
            - attachment
            - text
        field/id:
          type: string
        field/optional:
          type: boolean
        field/placeholder:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    Form:
      required:
        - form/external-title
        - form/fields
        - form/id
        - form/internal-name
      type: object
      properties:
        form/id:
          type: integer
          format: int64
        form/title:
          type: string
          description: DEPRECATED, will disappear, use either internal name or external title as you need
        form/internal-name:
          type: string
        form/external-title:
          $ref: '#/components/schemas/LocalizedString'
        form/fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
      additionalProperties: false
    FormTemplate:
      required:
        - archived
        - enabled
        - form/external-title
        - form/fields
        - form/id
        - form/internal-name
        - organization
      type: object
      properties:
        archived:
          type: boolean
        form/internal-name:
          type: string
          description: The internal name of the form only visible to the administration.
        form/fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldTemplate'
        form/title:
          type: string
          description: DEPRECATED, will disappear, use either internal name or external title as you need
        organization:
          $ref: '#/components/schemas/OrganizationOverview'
        form/errors:
          $ref: '#/components/schemas/FormTemplateErrors'
        form/id:
          type: integer
          format: int64
        form/external-title:
          $ref: '#/components/schemas/LocalizedString'
        enabled:
          type: boolean
      additionalProperties: false
    FormTemplateErrors:
      type: object
      properties:
        organization:
          type: object
        form/title:
          type: object
        form/internal-name:
          type: object
        form/external-title:
          type: object
        form/fields:
          $ref: '#/components/schemas/FormTemplateErrorsFields'
      additionalProperties: false
    FormTemplateErrorsFields:
      type: object
      additionalProperties:
        type: object
    FormTemplateFieldsColumns:
      required:
        - key
        - label
      type: object
      properties:
        key:
          type: string
        label:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    FormTemplateFieldsOptions:
      required:
        - key
        - label
      type: object
      properties:
        key:
          type: string
        label:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    FormTemplateFieldsVisibility:
      required:
        - visibility/type
      type: object
      properties:
        visibility/type:
          type: string
          enum:
            - only-if
            - always
        visibility/field:
          $ref: '#/components/schemas/FormTemplateFieldsVisibilityField'
        visibility/values:
          type: array
          items:
            type: string
      additionalProperties: false
      description: Always visible by default
    FormTemplateFieldsVisibilityField:
      required:
        - field/id
      type: object
      properties:
        field/id:
          type: string
      additionalProperties: false
    FormTemplateOverview:
      required:
        - archived
        - enabled
        - form/external-title
        - form/id
        - form/internal-name
        - organization
      type: object
      properties:
        archived:
          type: boolean
        form/internal-name:
          type: string
          description: The internal name of the form only visible to the administration.
        form/title:
          type: string
          description: DEPRECATED, will disappear, use either internal name or external title as you need
        organization:
          $ref: '#/components/schemas/OrganizationOverview'
        form/errors:
          $ref: '#/components/schemas/Response11142Errors'
        form/id:
          type: integer
          format: int64
        form/external-title:
          $ref: '#/components/schemas/LocalizedString'
        enabled:
          type: boolean
      additionalProperties: false
    GenerateEGAApiKeyResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        api-key-expiration-date:
          type: string
          format: date-time
      additionalProperties: false
    GetCatalogueItemsResponseLocalizationsKeyword11120:
      required:
        - id
        - infourl
        - langcode
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        langcode:
          type: string
        title:
          type: string
        infourl:
          type: string
          nullable: true
      additionalProperties: false
    GetCatalogueResponseLocalizationsKeyword11103:
      required:
        - id
        - infourl
        - langcode
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        langcode:
          type: string
        title:
          type: string
        infourl:
          type: string
          nullable: true
      additionalProperties: false
    GetCatalogueTreeResponse:
      required:
        - roots
      type: object
      properties:
        roots:
          type: array
          items:
            $ref: '#/components/schemas/CategoryTree'
      additionalProperties: false
    GetCatalogueTreeResponseRootsItemsLocalizationsKeyword11110:
      required:
        - id
        - infourl
        - langcode
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        langcode:
          type: string
        title:
          type: string
        infourl:
          type: string
          nullable: true
      additionalProperties: false
    GetCatalogueTreeResponseRootsLocalizationsKeyword11115:
      required:
        - id
        - infourl
        - langcode
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        langcode:
          type: string
        title:
          type: string
        infourl:
          type: string
          nullable: true
      additionalProperties: false
    GetConfigResponse:
      required:
        - alternative-login-url
        - application-id-column
        - attachment-max-size
        - authentication
        - catalogue-is-public
        - default-language
        - dev
        - enable-assign-external-id-ui
        - entitlement-default-length-days
        - extra-pages
        - languages
        - oidc-extra-attributes
      type: object
      properties:
        default-language:
          type: string
        extra-pages:
          type: array
          items:
            $ref: '#/components/schemas/ExtraPage'
        show-resources-section:
          type: boolean
        enable-voting:
          type: boolean
        show-attachment-zip-action:
          type: boolean
        alternative-login-url:
          type: string
          nullable: true
        tables:
          $ref: '#/components/schemas/GetConfigResponseTables'
        entitlement-default-length-days:
          type: integer
          format: int64
          nullable: true
        enable-cart:
          type: boolean
        enable-catalogue-tree:
          type: boolean
        catalogue-is-public:
          type: boolean
        enable-autosave:
          type: boolean
        authentication:
          type: string
        enable-doi:
          type: boolean
        enable-catalogue-table:
          type: boolean
        enable-ega:
          type: boolean
        oidc-extra-attributes:
          type: array
          items:
            $ref: '#/components/schemas/GetConfigResponseOidcExtraAttributes'
        attachment-max-size:
          type: integer
          format: int64
          nullable: true
        catalogue-tree-show-matching-parents:
          type: boolean
        application-id-column:
          type: string
          enum:
            - external-id
            - id
            - generated-and-assigned-external-id
        languages:
          type: array
          items:
            type: string
        application-list-hidden-columns:
          type: array
          items:
            type: string
        enable-duo:
          type: boolean
        enable-assign-external-id-ui:
          type: boolean
        dev:
          type: boolean
        show-pdf-action:
          type: boolean
      additionalProperties: false
    GetConfigResponseExtraPagesTranslations:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/GetConfigResponseExtraPagesTranslationsKeyword10948'
    GetConfigResponseExtraPagesTranslationsKeyword10948:
      type: object
      properties:
        title:
          type: string
        filename:
          type: string
        url:
          type: string
      additionalProperties: false
    GetConfigResponseOidcExtraAttributes:
      required:
        - attribute
      type: object
      properties:
        attribute:
          type: string
      additionalProperties:
        type: object
    GetConfigResponseTables:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/GetConfigResponseTablesKeyword10949'
    GetConfigResponseTablesKeyword10949:
      type: object
      additionalProperties:
        type: object
    GetJWKSResponse:
      required:
        - keys
      type: object
      properties:
        keys:
          type: array
          items:
            type: object
      additionalProperties: false
    GetPermissionsResponse:
      required:
        - ga4gh_passport_v1
      type: object
      properties:
        ga4gh_passport_v1:
          type: array
          items:
            type: string
      additionalProperties: false
    Handler:
      required:
        - email
        - name
        - userid
      type: object
      properties:
        userid:
          type: string
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationId'
        notification-email:
          type: string
          nullable: true
        researcher-status-by:
          type: string
        handler/active?:
          type: boolean
      additionalProperties:
        type: object
    Health:
      required:
        - healthy
        - latest-event
        - version
      type: object
      properties:
        healthy:
          type: boolean
        version:
          $ref: '#/components/schemas/HealthVersion'
        latest-event:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    HealthVersion:
      required:
        - revision
        - version
      type: object
      properties:
        version:
          type: string
        revision:
          type: string
      additionalProperties: false
    InvitationResponse:
      required:
        - invitation/created
        - invitation/email
        - invitation/invited-by
        - invitation/name
      type: object
      properties:
        invitation/workflow:
          $ref: '#/components/schemas/Response11156Workflow'
        invitation/created:
          type: string
          format: date-time
        invitation/sent:
          type: string
          format: date-time
        invitation/accepted:
          type: string
          format: date-time
        invitation/invited-by:
          $ref: '#/components/schemas/UserWithAttributes'
        invitation/name:
          type: string
        invitation/email:
          type: string
        invitation/id:
          type: integer
          format: int64
        invitation/invited-user:
          $ref: '#/components/schemas/UserWithAttributes'
      additionalProperties: false
    InviteDeciderCommand:
      required:
        - application-id
        - decider
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        decider:
          $ref: '#/components/schemas/InviteDeciderCommandDecider'
      additionalProperties: false
    InviteDeciderCommandDecider:
      required:
        - email
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      additionalProperties: false
    InviteMemberCommand:
      required:
        - application-id
        - member
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        member:
          $ref: '#/components/schemas/InviteMemberCommandMember'
      additionalProperties: false
    InviteMemberCommandMember:
      required:
        - email
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      additionalProperties: false
    InviteReviewerCommand:
      required:
        - application-id
        - reviewer
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        reviewer:
          $ref: '#/components/schemas/InviteReviewerCommandReviewer'
      additionalProperties: false
    InviteReviewerCommandReviewer:
      required:
        - email
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      additionalProperties: false
    License:
      required:
        - archived
        - enabled
        - id
        - licensetype
        - localizations
        - organization
      type: object
      properties:
        id:
          type: integer
          format: int64
        licensetype:
          type: string
          enum:
            - attachment
            - text
            - link
        organization:
          $ref: '#/components/schemas/OrganizationOverview'
        enabled:
          type: boolean
        archived:
          type: boolean
        localizations:
          $ref: '#/components/schemas/LicensesLocalizations'
      additionalProperties: false
    LicenseId:
      required:
        - license/id
      type: object
      properties:
        license/id:
          type: integer
          format: int64
      additionalProperties: false
    LicenseLocalization:
      required:
        - textcontent
        - title
      type: object
      properties:
        title:
          type: string
        textcontent:
          type: string
        attachment-id:
          type: integer
          description: For licenses of type attachment
          format: int64
          nullable: true
      additionalProperties: false
    LicenseLocalizations:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/LicenseLocalization'
      description: Licence localizations keyed by language
      example:
        en:
          title: English title
          textcontent: English content
        fi:
          title: Finnish title
          textcontent: Finnish content
    LicenseLocalizationsKeyword11164:
      required:
        - textcontent
        - title
      type: object
      properties:
        title:
          type: string
        textcontent:
          type: string
        attachment-id:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    LicensesLocalizations:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/LicensesLocalizationsKeyword11161'
    LicensesLocalizationsKeyword11161:
      required:
        - textcontent
        - title
      type: object
      properties:
        title:
          type: string
        textcontent:
          type: string
        attachment-id:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    LocalizedInt:
      type: object
      additionalProperties:
        type: integer
        format: int64
      description: Integers keyed by languages
      example:
        fi: 1
        en: 2
    LocalizedString:
      type: object
      additionalProperties:
        type: string
      description: Text values keyed by languages
      example:
        fi: text in Finnish
        en: text in English
    MondoCode:
      required:
        - id
      type: object
      properties:
        id:
          type: string
      additionalProperties: false
    MondoCodeFull:
      required:
        - id
        - label
      type: object
      properties:
        id:
          type: string
        label:
          type: string
      additionalProperties: false
    NewFieldTemplate:
      required:
        - field/optional
        - field/title
        - field/type
      type: object
      properties:
        field/info-text:
          $ref: '#/components/schemas/LocalizedString'
        field/title:
          $ref: '#/components/schemas/LocalizedString'
        field/columns:
          type: array
          items:
            $ref: '#/components/schemas/CreateFormCommandFieldsColumns'
        field/max-length:
          type: integer
          format: int64
          nullable: true
        field/options:
          type: array
          items:
            $ref: '#/components/schemas/CreateFormCommandFieldsOptions'
        field/privacy:
          type: string
          description: Public by default
          enum:
            - private
            - public
        field/visibility:
          $ref: '#/components/schemas/CreateFormCommandFieldsVisibility'
        field/type:
          type: string
          enum:
            - description
            - email
            - date
            - phone-number
            - table
            - header
            - texta
            - option
            - label
            - multiselect
            - ip-address
            - attachment
            - text
        field/id:
          type: string
        field/optional:
          type: boolean
        field/placeholder:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    OrganizationArchivedCommand:
      required:
        - archived
        - organization/id
      type: object
      properties:
        organization/id:
          type: string
        archived:
          type: boolean
      additionalProperties: false
    OrganizationEnabledCommand:
      required:
        - enabled
        - organization/id
      type: object
      properties:
        organization/id:
          type: string
        enabled:
          type: boolean
      additionalProperties: false
    OrganizationFull:
      required:
        - organization/id
        - organization/name
        - organization/short-name
      type: object
      properties:
        archived:
          type: boolean
        organization/id:
          type: string
        organization/short-name:
          $ref: '#/components/schemas/LocalizedString'
        organization/review-emails:
          type: array
          items:
            $ref: '#/components/schemas/Response11165ReviewEmails'
        enabled:
          type: boolean
        organization/owners:
          type: array
          items:
            $ref: '#/components/schemas/UserWithAttributes'
        organization/modifier:
          $ref: '#/components/schemas/UserWithAttributes'
        organization/last-modified:
          type: string
          format: date-time
        organization/name:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    OrganizationFullReviewEmails:
      required:
        - email
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        email:
          type: string
      additionalProperties: false
    OrganizationId:
      required:
        - organization/id
      type: object
      properties:
        organization/id:
          type: string
      additionalProperties: false
    OrganizationOverview:
      required:
        - organization/id
        - organization/name
        - organization/short-name
      type: object
      properties:
        organization/id:
          type: string
        organization/short-name:
          $ref: '#/components/schemas/LocalizedString'
        organization/name:
          $ref: '#/components/schemas/LocalizedString'
      additionalProperties: false
    RedactAttachmentsCommand:
      required:
        - application-id
        - public
        - redacted-attachments
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        redacted-attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        public:
          type: boolean
      additionalProperties: false
    RejectCommand:
      required:
        - application-id
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
      additionalProperties: false
    RemarkCommand:
      required:
        - application-id
        - public
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        public:
          type: boolean
      additionalProperties: false
    RemoveMemberCommand:
      required:
        - application-id
        - member
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        member:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    RequestDecisionCommand:
      required:
        - application-id
        - deciders
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        deciders:
          type: array
          items:
            type: string
      additionalProperties: false
    RequestReviewCommand:
      required:
        - application-id
        - reviewers
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        reviewers:
          type: array
          items:
            type: string
      additionalProperties: false
    Resource:
      required:
        - archived
        - enabled
        - id
        - licenses
        - organization
        - resid
      type: object
      properties:
        id:
          type: integer
          format: int64
        organization:
          $ref: '#/components/schemas/OrganizationOverview'
        resid:
          type: string
        enabled:
          type: boolean
        archived:
          type: boolean
        licenses:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLicense'
        resource/duo:
          $ref: '#/components/schemas/ResourcesDuo'
      additionalProperties: false
    ResourceDuo:
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
      additionalProperties: false
    ResourceDuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/ResourceDuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    ResourceDuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    ResourceLicense:
      required:
        - archived
        - enabled
        - id
        - licensetype
        - localizations
        - organization
      type: object
      properties:
        id:
          type: integer
          format: int64
        licensetype:
          type: string
          enum:
            - attachment
            - text
            - link
        organization:
          $ref: '#/components/schemas/OrganizationOverview'
        enabled:
          type: boolean
        archived:
          type: boolean
        localizations:
          $ref: '#/components/schemas/ResourcesLicensesLocalizations'
      additionalProperties: false
    ResourceLicensesLocalizations:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ResourceLicensesLocalizationsKeyword11195'
    ResourceLicensesLocalizationsKeyword11195:
      required:
        - textcontent
        - title
      type: object
      properties:
        title:
          type: string
        textcontent:
          type: string
        attachment-id:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    ResourcesDuo:
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
      additionalProperties: false
    ResourcesDuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/ResourcesDuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    ResourcesDuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    ResourcesLicensesLocalizations:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ResourcesLicensesLocalizationsKeyword11181'
    ResourcesLicensesLocalizationsKeyword11181:
      required:
        - textcontent
        - title
      type: object
      properties:
        title:
          type: string
        textcontent:
          type: string
        attachment-id:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    Response10953AcceptedLicenses:
      type: object
      additionalProperties:
        uniqueItems: true
        type: array
        items:
          type: integer
          format: int64
    Response10953AttachmentsEvent:
      required:
        - event/id
      type: object
      properties:
        event/id:
          type: integer
          format: int64
      additionalProperties: false
    Response10953BlacklistResource:
      required:
        - resource/ext-id
      type: object
      properties:
        resource/ext-id:
          type: string
      additionalProperties: false
    Response10953CopiedFrom:
      required:
        - application/external-id
        - application/id
      type: object
      properties:
        application/id:
          type: integer
          format: int64
        application/external-id:
          type: string
      additionalProperties: false
    Response10953CopiedTo:
      required:
        - application/external-id
        - application/id
      type: object
      properties:
        application/id:
          type: integer
          format: int64
        application/external-id:
          type: string
      additionalProperties: false
    Response10953Duo:
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
        duo/matches:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeMatch'
      additionalProperties: false
    Response10953DuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/Response10953DuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    Response10953DuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    Response10953DuoMatchesLabel:
      type: object
      additionalProperties:
        type: object
    Response10953DuoMatchesValidation:
      required:
        - validity
      type: object
      properties:
        validity:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Response10953DuoMatchesValidationErrors'
      additionalProperties: false
    Response10953DuoMatchesValidationErrors:
      required:
        - type
      type: object
      properties:
        type:
          type: string
      additionalProperties:
        type: object
    Response10953InvitedMembers:
      required:
        - email
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      additionalProperties: false
    Response10953ResourcesDuo:
      required:
        - duo/codes
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
      additionalProperties: false
    Response10953ResourcesDuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/Response10953ResourcesDuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    Response10953ResourcesDuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    Response10953Votes:
      type: object
      additionalProperties:
        type: string
    Response10953Workflow:
      required:
        - workflow/id
        - workflow/type
      type: object
      properties:
        workflow/id:
          type: integer
          format: int64
        workflow/type:
          type: string
        workflow.dynamic/handlers:
          type: array
          items:
            $ref: '#/components/schemas/Handler'
        workflow/voting:
          $ref: '#/components/schemas/WorkflowVoting'
        workflow/anonymize-handling:
          type: boolean
      additionalProperties: false
    Response10971AcceptedLicenses:
      type: object
      additionalProperties:
        uniqueItems: true
        type: array
        items:
          type: integer
          format: int64
    Response10971AttachmentsEvent:
      required:
        - event/id
      type: object
      properties:
        event/id:
          type: integer
          format: int64
      additionalProperties: false
    Response10971BlacklistResource:
      required:
        - resource/ext-id
      type: object
      properties:
        resource/ext-id:
          type: string
      additionalProperties: false
    Response10971CopiedFrom:
      required:
        - application/external-id
        - application/id
      type: object
      properties:
        application/id:
          type: integer
          format: int64
        application/external-id:
          type: string
      additionalProperties: false
    Response10971CopiedTo:
      required:
        - application/external-id
        - application/id
      type: object
      properties:
        application/id:
          type: integer
          format: int64
        application/external-id:
          type: string
      additionalProperties: false
    Response10971Duo:
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
        duo/matches:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeMatch'
      additionalProperties: false
    Response10971DuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/Response10971DuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    Response10971DuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    Response10971DuoMatchesLabel:
      type: object
      additionalProperties:
        type: object
    Response10971DuoMatchesValidation:
      required:
        - validity
      type: object
      properties:
        validity:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Response10971DuoMatchesValidationErrors'
      additionalProperties: false
    Response10971DuoMatchesValidationErrors:
      required:
        - type
      type: object
      properties:
        type:
          type: string
      additionalProperties:
        type: object
    Response10971InvitedMembers:
      required:
        - email
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      additionalProperties: false
    Response10971ResourcesDuo:
      required:
        - duo/codes
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
      additionalProperties: false
    Response10971ResourcesDuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/Response10971ResourcesDuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    Response10971ResourcesDuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    Response10971Votes:
      type: object
      additionalProperties:
        type: string
    Response10971Workflow:
      required:
        - workflow/id
        - workflow/type
      type: object
      properties:
        workflow/id:
          type: integer
          format: int64
        workflow/type:
          type: string
        workflow.dynamic/handlers:
          type: array
          items:
            $ref: '#/components/schemas/Handler'
        workflow/voting:
          $ref: '#/components/schemas/WorkflowVoting'
        workflow/anonymize-handling:
          type: boolean
      additionalProperties: false
    Response10989AcceptedLicenses:
      type: object
      additionalProperties:
        uniqueItems: true
        type: array
        items:
          type: integer
          format: int64
    Response10989AttachmentsEvent:
      required:
        - event/id
      type: object
      properties:
        event/id:
          type: integer
          format: int64
      additionalProperties: false
    Response10989BlacklistResource:
      required:
        - resource/ext-id
      type: object
      properties:
        resource/ext-id:
          type: string
      additionalProperties: false
    Response10989CopiedFrom:
      required:
        - application/external-id
        - application/id
      type: object
      properties:
        application/id:
          type: integer
          format: int64
        application/external-id:
          type: string
      additionalProperties: false
    Response10989CopiedTo:
      required:
        - application/external-id
        - application/id
      type: object
      properties:
        application/id:
          type: integer
          format: int64
        application/external-id:
          type: string
      additionalProperties: false
    Response10989Duo:
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
        duo/matches:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeMatch'
      additionalProperties: false
    Response10989DuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/Response10989DuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    Response10989DuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    Response10989DuoMatchesLabel:
      type: object
      additionalProperties:
        type: object
    Response10989DuoMatchesValidation:
      required:
        - validity
      type: object
      properties:
        validity:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Response10989DuoMatchesValidationErrors'
      additionalProperties: false
    Response10989DuoMatchesValidationErrors:
      required:
        - type
      type: object
      properties:
        type:
          type: string
      additionalProperties:
        type: object
    Response10989InvitedMembers:
      required:
        - email
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      additionalProperties: false
    Response10989ResourcesDuo:
      required:
        - duo/codes
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
      additionalProperties: false
    Response10989ResourcesDuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/Response10989ResourcesDuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    Response10989ResourcesDuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    Response10989Votes:
      type: object
      additionalProperties:
        type: string
    Response10989Workflow:
      required:
        - workflow/id
        - workflow/type
      type: object
      properties:
        workflow/id:
          type: integer
          format: int64
        workflow/type:
          type: string
        workflow.dynamic/handlers:
          type: array
          items:
            $ref: '#/components/schemas/Handler'
        workflow/voting:
          $ref: '#/components/schemas/WorkflowVoting'
        workflow/anonymize-handling:
          type: boolean
      additionalProperties: false
    Response11007AcceptedLicenses:
      type: object
      additionalProperties:
        uniqueItems: true
        type: array
        items:
          type: integer
          format: int64
    Response11007AttachmentsEvent:
      required:
        - event/id
      type: object
      properties:
        event/id:
          type: integer
          format: int64
      additionalProperties: false
    Response11007BlacklistResource:
      required:
        - resource/ext-id
      type: object
      properties:
        resource/ext-id:
          type: string
      additionalProperties: false
    Response11007CopiedFrom:
      required:
        - application/external-id
        - application/id
      type: object
      properties:
        application/id:
          type: integer
          format: int64
        application/external-id:
          type: string
      additionalProperties: false
    Response11007CopiedTo:
      required:
        - application/external-id
        - application/id
      type: object
      properties:
        application/id:
          type: integer
          format: int64
        application/external-id:
          type: string
      additionalProperties: false
    Response11007Duo:
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
        duo/matches:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeMatch'
      additionalProperties: false
    Response11007DuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/Response11007DuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    Response11007DuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    Response11007DuoMatchesLabel:
      type: object
      additionalProperties:
        type: object
    Response11007DuoMatchesValidation:
      required:
        - validity
      type: object
      properties:
        validity:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Response11007DuoMatchesValidationErrors'
      additionalProperties: false
    Response11007DuoMatchesValidationErrors:
      required:
        - type
      type: object
      properties:
        type:
          type: string
      additionalProperties:
        type: object
    Response11007InvitedMembers:
      required:
        - email
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      additionalProperties: false
    Response11007ResourcesDuo:
      required:
        - duo/codes
      type: object
      properties:
        duo/codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCodeFull'
      additionalProperties: false
    Response11007ResourcesDuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/Response11007ResourcesDuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    Response11007ResourcesDuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    Response11007Votes:
      type: object
      additionalProperties:
        type: string
    Response11007Workflow:
      required:
        - workflow/id
        - workflow/type
      type: object
      properties:
        workflow/id:
          type: integer
          format: int64
        workflow/type:
          type: string
        workflow.dynamic/handlers:
          type: array
          items:
            $ref: '#/components/schemas/Handler'
        workflow/voting:
          $ref: '#/components/schemas/WorkflowVoting'
        workflow/anonymize-handling:
          type: boolean
      additionalProperties: false
    Response11096Resource:
      required:
        - resource/ext-id
      type: object
      properties:
        resource/ext-id:
          type: string
      additionalProperties: false
    Response11142Errors:
      type: object
      properties:
        organization:
          type: object
        form/title:
          type: object
        form/internal-name:
          type: object
        form/external-title:
          type: object
        form/fields:
          $ref: '#/components/schemas/Response11142ErrorsFields'
      additionalProperties: false
    Response11142ErrorsFields:
      type: object
      additionalProperties:
        type: object
    Response11156Workflow:
      required:
        - workflow/id
      type: object
      properties:
        workflow/id:
          type: integer
          format: int64
      additionalProperties: false
    Response11165ReviewEmails:
      required:
        - email
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        email:
          type: string
      additionalProperties: false
    Response11185Restrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/Response11185RestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    Response11185RestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    ReturnCommand:
      required:
        - application-id
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
      additionalProperties: false
    ReviewCommand:
      required:
        - application-id
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
      additionalProperties: false
    Reviewer:
      required:
        - email
        - name
        - userid
      type: object
      properties:
        userid:
          type: string
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationId'
        notification-email:
          type: string
          nullable: true
        researcher-status-by:
          type: string
      additionalProperties:
        type: object
    RevokeCommand:
      required:
        - application-id
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
      additionalProperties: false
    SaveAttachmentResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        errors:
          type: array
          items:
            type: object
        warnings:
          type: array
          items:
            type: object
        id:
          type: integer
          format: int64
      additionalProperties: false
    SaveDraftCommand:
      required:
        - application-id
        - field-values
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        field-values:
          type: array
          items:
            $ref: '#/components/schemas/SaveDraftCommandFieldValues'
        duo-codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCode'
      additionalProperties: false
    SaveDraftCommandDuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/SaveDraftCommandDuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    SaveDraftCommandDuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    SaveDraftCommandFieldValues:
      required:
        - field
        - form
        - value
      type: object
      properties:
        form:
          type: integer
          format: int64
        field:
          type: string
        value:
          type: object
          description: 'A string for most fields, or [[{"column": string, "value": string}]] for table fields'
          example: value
          x-oneOf:
            - type: string
            - type: array
              items:
                type: array
                items:
                  $ref: '#/definitions/SaveDraftCommandFieldValuesValue'
      additionalProperties: false
    SaveDraftCommandFieldValuesValue:
      required:
        - column
        - value
      type: object
      properties:
        column:
          type: string
        value:
          type: string
      additionalProperties: false
    SubmitCommand:
      required:
        - application-id
      type: object
      properties:
        application-id:
          type: integer
          format: int64
      additionalProperties: false
    SuccessResponse:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
        errors:
          type: array
          items:
            type: object
        warnings:
          type: array
          items:
            type: object
      additionalProperties: false
    UninviteMemberCommand:
      required:
        - application-id
        - member
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        member:
          $ref: '#/components/schemas/UninviteMemberCommandMember'
      additionalProperties: false
    UninviteMemberCommandMember:
      required:
        - email
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      additionalProperties: false
    UpdateCategoryCommand:
      required:
        - category/id
        - category/title
      type: object
      properties:
        category/title:
          $ref: '#/components/schemas/LocalizedString'
        category/description:
          $ref: '#/components/schemas/LocalizedString'
        category/display-order:
          type: integer
          format: int64
        category/children:
          type: array
          items:
            $ref: '#/components/schemas/CategoryId'
        category/id:
          type: integer
          format: int64
      additionalProperties: false
    UpdateUserSettings:
      type: object
      properties:
        language:
          type: string
        notification-email:
          type: string
          nullable: true
      additionalProperties: false
    User:
      required:
        - userid
      type: object
      properties:
        userid:
          type: string
      additionalProperties: false
    UserSettings:
      required:
        - language
        - notification-email
      type: object
      properties:
        language:
          type: string
        notification-email:
          type: string
          nullable: true
        ega:
          $ref: '#/components/schemas/UserSettingsEga'
      additionalProperties: false
    UserSettingsEga:
      type: object
      properties:
        api-key-expiration-date:
          type: string
          format: date-time
      additionalProperties: false
    UserWithAttributes:
      required:
        - email
        - name
        - userid
      type: object
      properties:
        userid:
          type: string
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationId'
        notification-email:
          type: string
          nullable: true
        researcher-status-by:
          type: string
      additionalProperties:
        type: object
    V2License:
      required:
        - license/archived
        - license/enabled
        - license/id
        - license/title
        - license/type
      type: object
      properties:
        license/attachment-filename:
          $ref: '#/components/schemas/LocalizedString'
        license/text:
          $ref: '#/components/schemas/LocalizedString'
        license/type:
          type: string
          enum:
            - link
            - attachment
            - text
        license/title:
          $ref: '#/components/schemas/LocalizedString'
        license/link:
          $ref: '#/components/schemas/LocalizedString'
        license/id:
          type: integer
          format: int64
        license/attachment-id:
          $ref: '#/components/schemas/LocalizedInt'
        license/enabled:
          type: boolean
        license/archived:
          type: boolean
      additionalProperties: false
    V2Resource:
      required:
        - catalogue-item/archived
        - catalogue-item/enabled
        - catalogue-item/end
        - catalogue-item/expired
        - catalogue-item/id
        - catalogue-item/infourl
        - catalogue-item/start
        - catalogue-item/title
        - resource/ext-id
        - resource/id
      type: object
      properties:
        catalogue-item/end:
          type: string
          format: date-time
          nullable: true
        catalogue-item/expired:
          type: boolean
        catalogue-item/enabled:
          type: boolean
        resource/id:
          type: integer
          format: int64
        catalogue-item/title:
          $ref: '#/components/schemas/LocalizedString'
        resource/duo:
          $ref: '#/components/schemas/Response10953ResourcesDuo'
        catalogue-item/infourl:
          $ref: '#/components/schemas/LocalizedString'
        resource/ext-id:
          type: string
        catalogue-item/start:
          type: string
          format: date-time
        catalogue-item/archived:
          type: boolean
        catalogue-item/id:
          type: integer
          format: int64
      additionalProperties: false
    ValidateRequest:
      required:
        - application-id
        - field-values
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        field-values:
          type: array
          items:
            $ref: '#/components/schemas/ValidateRequestFieldValues'
        duo-codes:
          type: array
          items:
            $ref: '#/components/schemas/DuoCode'
      additionalProperties: false
    ValidateRequestDuoCodesRestrictions:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            type: object
            x-oneOf:
              - $ref: '#/definitions/ValidateRequestDuoCodesRestrictionsValues'
              - $ref: '#/definitions/MondoCodeFull'
              - $ref: '#/definitions/MondoCode'
      additionalProperties: false
    ValidateRequestDuoCodesRestrictionsValues:
      required:
        - value
      type: object
      properties:
        value:
          type: string
      additionalProperties: false
    ValidateRequestFieldValues:
      required:
        - field
        - form
        - value
      type: object
      properties:
        form:
          type: integer
          format: int64
        field:
          type: string
        value:
          type: object
          description: 'A string for most fields, or [[{"column": string, "value": string}]] for table fields'
          example: value
          x-oneOf:
            - type: string
            - type: array
              items:
                type: array
                items:
                  $ref: '#/definitions/ValidateRequestFieldValuesValue'
      additionalProperties: false
    ValidateRequestFieldValuesValue:
      required:
        - column
        - value
      type: object
      properties:
        column:
          type: string
        value:
          type: string
      additionalProperties: false
    VoteCommand:
      required:
        - application-id
        - vote
      type: object
      properties:
        application-id:
          type: integer
          format: int64
        comment:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/CommandAttachment'
        vote:
          type: string
      additionalProperties: false
    Workflow:
      required:
        - archived
        - enabled
        - id
        - organization
        - title
        - workflow
      type: object
      properties:
        id:
          type: integer
          format: int64
        organization:
          $ref: '#/components/schemas/OrganizationOverview'
        title:
          type: string
        workflow:
          type: object
        enabled:
          type: boolean
        archived:
          type: boolean
      additionalProperties: false
    WorkflowVoting:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          nullable: true
          enum:
            - handlers-vote
      additionalProperties: false
    WriteCatalogueItemLocalizations:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CatalogueItemLocalization'
      description: Localizations keyed by language
      example:
        fi:
          title: Title in Finnish
          infourl: http://example.fi
        en:
          title: Title in English
          infourl: http://example.com
x-original-swagger-version: '2.0'
